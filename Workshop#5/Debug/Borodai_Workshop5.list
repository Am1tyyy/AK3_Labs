
Borodai_Workshop5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d78  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003f00  08003f00  00004f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f20  08003f20  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f20  08003f20  00004f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f28  08003f28  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f28  08003f28  00004f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f2c  08003f2c  00004f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003f30  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000001e8  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001f4  200001f4  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a99  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c9e  00000000  00000000  0000ead5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  00010778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073c  00000000  00000000  000110e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fe3e  00000000  00000000  0001181c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d013  00000000  00000000  0003165a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0fe2  00000000  00000000  0003e66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff64f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002648  00000000  00000000  000ff694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00101cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ee8 	.word	0x08003ee8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ee8 	.word	0x08003ee8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <CS43L22_Init>:

/* USER CODE BEGIN 0 */


void CS43L22_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af02      	add	r7, sp, #8
    // Enable chip
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2110      	movs	r1, #16
 80004fe:	4863      	ldr	r0, [pc, #396]	@ (800068c <CS43L22_Init+0x198>)
 8000500:	f001 fce6 	bl	8001ed0 <HAL_GPIO_WritePin>


    uint8_t TxBuffer[2];


    TxBuffer[0] = 0x0D; TxBuffer[1] = 0x01;
 8000504:	230d      	movs	r3, #13
 8000506:	713b      	strb	r3, [r7, #4]
 8000508:	2301      	movs	r3, #1
 800050a:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800050c:	1d3a      	adds	r2, r7, #4
 800050e:	230a      	movs	r3, #10
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2302      	movs	r3, #2
 8000514:	2194      	movs	r1, #148	@ 0x94
 8000516:	485e      	ldr	r0, [pc, #376]	@ (8000690 <CS43L22_Init+0x19c>)
 8000518:	f001 fe38 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x00; TxBuffer[1] = 0x99;
 800051c:	2300      	movs	r3, #0
 800051e:	713b      	strb	r3, [r7, #4]
 8000520:	2399      	movs	r3, #153	@ 0x99
 8000522:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000524:	1d3a      	adds	r2, r7, #4
 8000526:	230a      	movs	r3, #10
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2302      	movs	r3, #2
 800052c:	2194      	movs	r1, #148	@ 0x94
 800052e:	4858      	ldr	r0, [pc, #352]	@ (8000690 <CS43L22_Init+0x19c>)
 8000530:	f001 fe2c 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x47; TxBuffer[1] = 0x80;
 8000534:	2347      	movs	r3, #71	@ 0x47
 8000536:	713b      	strb	r3, [r7, #4]
 8000538:	2380      	movs	r3, #128	@ 0x80
 800053a:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800053c:	1d3a      	adds	r2, r7, #4
 800053e:	230a      	movs	r3, #10
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2302      	movs	r3, #2
 8000544:	2194      	movs	r1, #148	@ 0x94
 8000546:	4852      	ldr	r0, [pc, #328]	@ (8000690 <CS43L22_Init+0x19c>)
 8000548:	f001 fe20 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x32; TxBuffer[1] = 0xFF;
 800054c:	2332      	movs	r3, #50	@ 0x32
 800054e:	713b      	strb	r3, [r7, #4]
 8000550:	23ff      	movs	r3, #255	@ 0xff
 8000552:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000554:	1d3a      	adds	r2, r7, #4
 8000556:	230a      	movs	r3, #10
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2302      	movs	r3, #2
 800055c:	2194      	movs	r1, #148	@ 0x94
 800055e:	484c      	ldr	r0, [pc, #304]	@ (8000690 <CS43L22_Init+0x19c>)
 8000560:	f001 fe14 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x32; TxBuffer[1] = 0x7F;
 8000564:	2332      	movs	r3, #50	@ 0x32
 8000566:	713b      	strb	r3, [r7, #4]
 8000568:	237f      	movs	r3, #127	@ 0x7f
 800056a:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800056c:	1d3a      	adds	r2, r7, #4
 800056e:	230a      	movs	r3, #10
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2302      	movs	r3, #2
 8000574:	2194      	movs	r1, #148	@ 0x94
 8000576:	4846      	ldr	r0, [pc, #280]	@ (8000690 <CS43L22_Init+0x19c>)
 8000578:	f001 fe08 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x00; TxBuffer[1] = 0x00;
 800057c:	2300      	movs	r3, #0
 800057e:	713b      	strb	r3, [r7, #4]
 8000580:	2300      	movs	r3, #0
 8000582:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000584:	1d3a      	adds	r2, r7, #4
 8000586:	230a      	movs	r3, #10
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2302      	movs	r3, #2
 800058c:	2194      	movs	r1, #148	@ 0x94
 800058e:	4840      	ldr	r0, [pc, #256]	@ (8000690 <CS43L22_Init+0x19c>)
 8000590:	f001 fdfc 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x04; TxBuffer[1] = 0xAF;
 8000594:	2304      	movs	r3, #4
 8000596:	713b      	strb	r3, [r7, #4]
 8000598:	23af      	movs	r3, #175	@ 0xaf
 800059a:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800059c:	1d3a      	adds	r2, r7, #4
 800059e:	230a      	movs	r3, #10
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2302      	movs	r3, #2
 80005a4:	2194      	movs	r1, #148	@ 0x94
 80005a6:	483a      	ldr	r0, [pc, #232]	@ (8000690 <CS43L22_Init+0x19c>)
 80005a8:	f001 fdf0 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x0D; TxBuffer[1] = 0x70;
 80005ac:	230d      	movs	r3, #13
 80005ae:	713b      	strb	r3, [r7, #4]
 80005b0:	2370      	movs	r3, #112	@ 0x70
 80005b2:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005b4:	1d3a      	adds	r2, r7, #4
 80005b6:	230a      	movs	r3, #10
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2302      	movs	r3, #2
 80005bc:	2194      	movs	r1, #148	@ 0x94
 80005be:	4834      	ldr	r0, [pc, #208]	@ (8000690 <CS43L22_Init+0x19c>)
 80005c0:	f001 fde4 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x05; TxBuffer[1] = 0x81;
 80005c4:	2305      	movs	r3, #5
 80005c6:	713b      	strb	r3, [r7, #4]
 80005c8:	2381      	movs	r3, #129	@ 0x81
 80005ca:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005cc:	1d3a      	adds	r2, r7, #4
 80005ce:	230a      	movs	r3, #10
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2302      	movs	r3, #2
 80005d4:	2194      	movs	r1, #148	@ 0x94
 80005d6:	482e      	ldr	r0, [pc, #184]	@ (8000690 <CS43L22_Init+0x19c>)
 80005d8:	f001 fdd8 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x06; TxBuffer[1] = 0x07;
 80005dc:	2306      	movs	r3, #6
 80005de:	713b      	strb	r3, [r7, #4]
 80005e0:	2307      	movs	r3, #7
 80005e2:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005e4:	1d3a      	adds	r2, r7, #4
 80005e6:	230a      	movs	r3, #10
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2302      	movs	r3, #2
 80005ec:	2194      	movs	r1, #148	@ 0x94
 80005ee:	4828      	ldr	r0, [pc, #160]	@ (8000690 <CS43L22_Init+0x19c>)
 80005f0:	f001 fdcc 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x0A; TxBuffer[1] = 0x00;
 80005f4:	230a      	movs	r3, #10
 80005f6:	713b      	strb	r3, [r7, #4]
 80005f8:	2300      	movs	r3, #0
 80005fa:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005fc:	1d3a      	adds	r2, r7, #4
 80005fe:	230a      	movs	r3, #10
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2302      	movs	r3, #2
 8000604:	2194      	movs	r1, #148	@ 0x94
 8000606:	4822      	ldr	r0, [pc, #136]	@ (8000690 <CS43L22_Init+0x19c>)
 8000608:	f001 fdc0 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x27; TxBuffer[1] = 0x00;
 800060c:	2327      	movs	r3, #39	@ 0x27
 800060e:	713b      	strb	r3, [r7, #4]
 8000610:	2300      	movs	r3, #0
 8000612:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000614:	1d3a      	adds	r2, r7, #4
 8000616:	230a      	movs	r3, #10
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2302      	movs	r3, #2
 800061c:	2194      	movs	r1, #148	@ 0x94
 800061e:	481c      	ldr	r0, [pc, #112]	@ (8000690 <CS43L22_Init+0x19c>)
 8000620:	f001 fdb4 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x1A; TxBuffer[1] = 0x0A;
 8000624:	231a      	movs	r3, #26
 8000626:	713b      	strb	r3, [r7, #4]
 8000628:	230a      	movs	r3, #10
 800062a:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800062c:	1d3a      	adds	r2, r7, #4
 800062e:	230a      	movs	r3, #10
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2302      	movs	r3, #2
 8000634:	2194      	movs	r1, #148	@ 0x94
 8000636:	4816      	ldr	r0, [pc, #88]	@ (8000690 <CS43L22_Init+0x19c>)
 8000638:	f001 fda8 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x1B; TxBuffer[1] = 0x0A;
 800063c:	231b      	movs	r3, #27
 800063e:	713b      	strb	r3, [r7, #4]
 8000640:	230a      	movs	r3, #10
 8000642:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000644:	1d3a      	adds	r2, r7, #4
 8000646:	230a      	movs	r3, #10
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2302      	movs	r3, #2
 800064c:	2194      	movs	r1, #148	@ 0x94
 800064e:	4810      	ldr	r0, [pc, #64]	@ (8000690 <CS43L22_Init+0x19c>)
 8000650:	f001 fd9c 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x1F; TxBuffer[1] = 0x0F;
 8000654:	231f      	movs	r3, #31
 8000656:	713b      	strb	r3, [r7, #4]
 8000658:	230f      	movs	r3, #15
 800065a:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800065c:	1d3a      	adds	r2, r7, #4
 800065e:	230a      	movs	r3, #10
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2302      	movs	r3, #2
 8000664:	2194      	movs	r1, #148	@ 0x94
 8000666:	480a      	ldr	r0, [pc, #40]	@ (8000690 <CS43L22_Init+0x19c>)
 8000668:	f001 fd90 	bl	800218c <HAL_I2C_Master_Transmit>


    TxBuffer[0] = 0x02; TxBuffer[1] = 0x9E;
 800066c:	2302      	movs	r3, #2
 800066e:	713b      	strb	r3, [r7, #4]
 8000670:	239e      	movs	r3, #158	@ 0x9e
 8000672:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000674:	1d3a      	adds	r2, r7, #4
 8000676:	230a      	movs	r3, #10
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2302      	movs	r3, #2
 800067c:	2194      	movs	r1, #148	@ 0x94
 800067e:	4804      	ldr	r0, [pc, #16]	@ (8000690 <CS43L22_Init+0x19c>)
 8000680:	f001 fd84 	bl	800218c <HAL_I2C_Master_Transmit>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40020c00 	.word	0x40020c00
 8000690:	20000028 	.word	0x20000028

08000694 <CS43L22_Beep>:


void CS43L22_Beep(soundToneType pitch, uint32_t duration_ms)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af02      	add	r7, sp, #8
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
    uint8_t TxBuffer[2];


    // Set volume and off time
    TxBuffer[0] = 0x1D;
 80006a0:	231d      	movs	r3, #29
 80006a2:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = 0x00;
 80006a4:	2300      	movs	r3, #0
 80006a6:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80006a8:	f107 020c 	add.w	r2, r7, #12
 80006ac:	230a      	movs	r3, #10
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2302      	movs	r3, #2
 80006b2:	2194      	movs	r1, #148	@ 0x94
 80006b4:	4819      	ldr	r0, [pc, #100]	@ (800071c <CS43L22_Beep+0x88>)
 80006b6:	f001 fd69 	bl	800218c <HAL_I2C_Master_Transmit>


    // Set sound frequency
    TxBuffer[0] = 0x1C;
 80006ba:	231c      	movs	r3, #28
 80006bc:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = (pitch << 4);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	011b      	lsls	r3, r3, #4
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80006c6:	f107 020c 	add.w	r2, r7, #12
 80006ca:	230a      	movs	r3, #10
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2302      	movs	r3, #2
 80006d0:	2194      	movs	r1, #148	@ 0x94
 80006d2:	4812      	ldr	r0, [pc, #72]	@ (800071c <CS43L22_Beep+0x88>)
 80006d4:	f001 fd5a 	bl	800218c <HAL_I2C_Master_Transmit>


    // Enable continuous mode
    TxBuffer[0] = 0x1E;
 80006d8:	231e      	movs	r3, #30
 80006da:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = 0xC0;
 80006dc:	23c0      	movs	r3, #192	@ 0xc0
 80006de:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80006e0:	f107 020c 	add.w	r2, r7, #12
 80006e4:	230a      	movs	r3, #10
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2302      	movs	r3, #2
 80006ea:	2194      	movs	r1, #148	@ 0x94
 80006ec:	480b      	ldr	r0, [pc, #44]	@ (800071c <CS43L22_Beep+0x88>)
 80006ee:	f001 fd4d 	bl	800218c <HAL_I2C_Master_Transmit>


    // Playing...
    HAL_Delay(duration_ms);
 80006f2:	6838      	ldr	r0, [r7, #0]
 80006f4:	f000 fdaa 	bl	800124c <HAL_Delay>


    // Disable continuous mode
    TxBuffer[0] = 0x1E;
 80006f8:	231e      	movs	r3, #30
 80006fa:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = 0x00;
 80006fc:	2300      	movs	r3, #0
 80006fe:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000700:	f107 020c 	add.w	r2, r7, #12
 8000704:	230a      	movs	r3, #10
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2302      	movs	r3, #2
 800070a:	2194      	movs	r1, #148	@ 0x94
 800070c:	4803      	ldr	r0, [pc, #12]	@ (800071c <CS43L22_Beep+0x88>)
 800070e:	f001 fd3d 	bl	800218c <HAL_I2C_Master_Transmit>
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000028 	.word	0x20000028

08000720 <main>:

/* USER CODE END 0 */


int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
    HAL_Init();
 8000726:	f000 fd1f 	bl	8001168 <HAL_Init>
    SystemClock_Config();
 800072a:	f000 fa89 	bl	8000c40 <SystemClock_Config>
    MX_GPIO_Init();
 800072e:	f000 fa21 	bl	8000b74 <MX_GPIO_Init>
    MX_DMA_Init();
 8000732:	f000 fb4f 	bl	8000dd4 <MX_DMA_Init>
    MX_I2C1_Init();
 8000736:	f000 faf1 	bl	8000d1c <MX_I2C1_Init>
    MX_I2S3_Init();
 800073a:	f000 fb1d 	bl	8000d78 <MX_I2S3_Init>


    CS43L22_Init();
 800073e:	f7ff fed9 	bl	80004f4 <CS43L22_Init>
    HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, 100);
 8000742:	2264      	movs	r2, #100	@ 0x64
 8000744:	49d2      	ldr	r1, [pc, #840]	@ (8000a90 <main+0x370>)
 8000746:	48d3      	ldr	r0, [pc, #844]	@ (8000a94 <main+0x374>)
 8000748:	f002 f9ba 	bl	8002ac0 <HAL_I2S_Transmit_DMA>


    while (1)
    {
        // Перевірка чи ще потрібно грати
        if(play_count >= max_plays)
 800074c:	4bd2      	ldr	r3, [pc, #840]	@ (8000a98 <main+0x378>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2203      	movs	r2, #3
 8000752:	4293      	cmp	r3, r2
 8000754:	d348      	bcc.n	80007e8 <main+0xc8>
        {
            // Після 3 програвань тільки мигання світлодіодів без музики
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800075c:	48cf      	ldr	r0, [pc, #828]	@ (8000a9c <main+0x37c>)
 800075e:	f001 fbb7 	bl	8001ed0 <HAL_GPIO_WritePin>
            HAL_Delay(250);
 8000762:	20fa      	movs	r0, #250	@ 0xfa
 8000764:	f000 fd72 	bl	800124c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800076e:	48cb      	ldr	r0, [pc, #812]	@ (8000a9c <main+0x37c>)
 8000770:	f001 fbae 	bl	8001ed0 <HAL_GPIO_WritePin>
            HAL_Delay(250);
 8000774:	20fa      	movs	r0, #250	@ 0xfa
 8000776:	f000 fd69 	bl	800124c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000780:	48c6      	ldr	r0, [pc, #792]	@ (8000a9c <main+0x37c>)
 8000782:	f001 fba5 	bl	8001ed0 <HAL_GPIO_WritePin>
            HAL_Delay(250);
 8000786:	20fa      	movs	r0, #250	@ 0xfa
 8000788:	f000 fd60 	bl	800124c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000792:	48c2      	ldr	r0, [pc, #776]	@ (8000a9c <main+0x37c>)
 8000794:	f001 fb9c 	bl	8001ed0 <HAL_GPIO_WritePin>
            HAL_Delay(250);
 8000798:	20fa      	movs	r0, #250	@ 0xfa
 800079a:	f000 fd57 	bl	800124c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007a4:	48bd      	ldr	r0, [pc, #756]	@ (8000a9c <main+0x37c>)
 80007a6:	f001 fb93 	bl	8001ed0 <HAL_GPIO_WritePin>
            HAL_Delay(250);
 80007aa:	20fa      	movs	r0, #250	@ 0xfa
 80007ac:	f000 fd4e 	bl	800124c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007b6:	48b9      	ldr	r0, [pc, #740]	@ (8000a9c <main+0x37c>)
 80007b8:	f001 fb8a 	bl	8001ed0 <HAL_GPIO_WritePin>
            HAL_Delay(250);
 80007bc:	20fa      	movs	r0, #250	@ 0xfa
 80007be:	f000 fd45 	bl	800124c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c8:	48b4      	ldr	r0, [pc, #720]	@ (8000a9c <main+0x37c>)
 80007ca:	f001 fb81 	bl	8001ed0 <HAL_GPIO_WritePin>
            HAL_Delay(250);
 80007ce:	20fa      	movs	r0, #250	@ 0xfa
 80007d0:	f000 fd3c 	bl	800124c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007da:	48b0      	ldr	r0, [pc, #704]	@ (8000a9c <main+0x37c>)
 80007dc:	f001 fb78 	bl	8001ed0 <HAL_GPIO_WritePin>
            HAL_Delay(250);
 80007e0:	20fa      	movs	r0, #250	@ 0xfa
 80007e2:	f000 fd33 	bl	800124c <HAL_Delay>
            continue;
 80007e6:	e1bf      	b.n	8000b68 <main+0x448>

        // Музика + світлодіоди разом


        // C5-D5-E5-C5 з світлодіодами
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007ee:	48ab      	ldr	r0, [pc, #684]	@ (8000a9c <main+0x37c>)
 80007f0:	f001 fb6e 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(C5, quarter_note_duration);
 80007f4:	2335      	movs	r3, #53	@ 0x35
 80007f6:	4619      	mov	r1, r3
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff ff4b 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000804:	48a5      	ldr	r0, [pc, #660]	@ (8000a9c <main+0x37c>)
 8000806:	f001 fb63 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 800080a:	2335      	movs	r3, #53	@ 0x35
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fd1d 	bl	800124c <HAL_Delay>


        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000818:	48a0      	ldr	r0, [pc, #640]	@ (8000a9c <main+0x37c>)
 800081a:	f001 fb59 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(D5, quarter_note_duration);
 800081e:	2335      	movs	r3, #53	@ 0x35
 8000820:	4619      	mov	r1, r3
 8000822:	2002      	movs	r0, #2
 8000824:	f7ff ff36 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800082e:	489b      	ldr	r0, [pc, #620]	@ (8000a9c <main+0x37c>)
 8000830:	f001 fb4e 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 8000834:	2335      	movs	r3, #53	@ 0x35
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fd08 	bl	800124c <HAL_Delay>


        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000842:	4896      	ldr	r0, [pc, #600]	@ (8000a9c <main+0x37c>)
 8000844:	f001 fb44 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(E5, quarter_note_duration);
 8000848:	2335      	movs	r3, #53	@ 0x35
 800084a:	4619      	mov	r1, r3
 800084c:	2003      	movs	r0, #3
 800084e:	f7ff ff21 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000858:	4890      	ldr	r0, [pc, #576]	@ (8000a9c <main+0x37c>)
 800085a:	f001 fb39 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 800085e:	2335      	movs	r3, #53	@ 0x35
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fcf3 	bl	800124c <HAL_Delay>


        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800086c:	488b      	ldr	r0, [pc, #556]	@ (8000a9c <main+0x37c>)
 800086e:	f001 fb2f 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(C5, quarter_note_duration);
 8000872:	2335      	movs	r3, #53	@ 0x35
 8000874:	4619      	mov	r1, r3
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff ff0c 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000882:	4886      	ldr	r0, [pc, #536]	@ (8000a9c <main+0x37c>)
 8000884:	f001 fb24 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 8000888:	2335      	movs	r3, #53	@ 0x35
 800088a:	4618      	mov	r0, r3
 800088c:	f000 fcde 	bl	800124c <HAL_Delay>


        // Повтор C5-D5-E5-C5
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000896:	4881      	ldr	r0, [pc, #516]	@ (8000a9c <main+0x37c>)
 8000898:	f001 fb1a 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(C5, quarter_note_duration);
 800089c:	2335      	movs	r3, #53	@ 0x35
 800089e:	4619      	mov	r1, r3
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff fef7 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008ac:	487b      	ldr	r0, [pc, #492]	@ (8000a9c <main+0x37c>)
 80008ae:	f001 fb0f 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 80008b2:	2335      	movs	r3, #53	@ 0x35
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fcc9 	bl	800124c <HAL_Delay>


        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c0:	4876      	ldr	r0, [pc, #472]	@ (8000a9c <main+0x37c>)
 80008c2:	f001 fb05 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(D5, quarter_note_duration);
 80008c6:	2335      	movs	r3, #53	@ 0x35
 80008c8:	4619      	mov	r1, r3
 80008ca:	2002      	movs	r0, #2
 80008cc:	f7ff fee2 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d6:	4871      	ldr	r0, [pc, #452]	@ (8000a9c <main+0x37c>)
 80008d8:	f001 fafa 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 80008dc:	2335      	movs	r3, #53	@ 0x35
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fcb4 	bl	800124c <HAL_Delay>


        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ea:	486c      	ldr	r0, [pc, #432]	@ (8000a9c <main+0x37c>)
 80008ec:	f001 faf0 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(E5, quarter_note_duration);
 80008f0:	2335      	movs	r3, #53	@ 0x35
 80008f2:	4619      	mov	r1, r3
 80008f4:	2003      	movs	r0, #3
 80008f6:	f7ff fecd 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000900:	4866      	ldr	r0, [pc, #408]	@ (8000a9c <main+0x37c>)
 8000902:	f001 fae5 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 8000906:	2335      	movs	r3, #53	@ 0x35
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fc9f 	bl	800124c <HAL_Delay>


        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000914:	4861      	ldr	r0, [pc, #388]	@ (8000a9c <main+0x37c>)
 8000916:	f001 fadb 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(C5, quarter_note_duration);
 800091a:	2335      	movs	r3, #53	@ 0x35
 800091c:	4619      	mov	r1, r3
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff feb8 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800092a:	485c      	ldr	r0, [pc, #368]	@ (8000a9c <main+0x37c>)
 800092c:	f001 fad0 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 8000930:	2335      	movs	r3, #53	@ 0x35
 8000932:	4618      	mov	r0, r3
 8000934:	f000 fc8a 	bl	800124c <HAL_Delay>


        // E5-F5-G5
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800093e:	4857      	ldr	r0, [pc, #348]	@ (8000a9c <main+0x37c>)
 8000940:	f001 fac6 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(E5, quarter_note_duration);
 8000944:	2335      	movs	r3, #53	@ 0x35
 8000946:	4619      	mov	r1, r3
 8000948:	2003      	movs	r0, #3
 800094a:	f7ff fea3 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000954:	4851      	ldr	r0, [pc, #324]	@ (8000a9c <main+0x37c>)
 8000956:	f001 fabb 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 800095a:	2335      	movs	r3, #53	@ 0x35
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fc75 	bl	800124c <HAL_Delay>


        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000968:	484c      	ldr	r0, [pc, #304]	@ (8000a9c <main+0x37c>)
 800096a:	f001 fab1 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(F5, quarter_note_duration);
 800096e:	2335      	movs	r3, #53	@ 0x35
 8000970:	4619      	mov	r1, r3
 8000972:	2004      	movs	r0, #4
 8000974:	f7ff fe8e 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800097e:	4847      	ldr	r0, [pc, #284]	@ (8000a9c <main+0x37c>)
 8000980:	f001 faa6 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 8000984:	2335      	movs	r3, #53	@ 0x35
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fc60 	bl	800124c <HAL_Delay>


        // Для G5 всі світлодіоди (довша нота)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000992:	4842      	ldr	r0, [pc, #264]	@ (8000a9c <main+0x37c>)
 8000994:	f001 fa9c 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(G5, half_note_duration);
 8000998:	236b      	movs	r3, #107	@ 0x6b
 800099a:	4619      	mov	r1, r3
 800099c:	2005      	movs	r0, #5
 800099e:	f7ff fe79 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80009a8:	483c      	ldr	r0, [pc, #240]	@ (8000a9c <main+0x37c>)
 80009aa:	f001 fa91 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(half_note_duration);
 80009ae:	236b      	movs	r3, #107	@ 0x6b
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fc4b 	bl	800124c <HAL_Delay>


        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009bc:	4837      	ldr	r0, [pc, #220]	@ (8000a9c <main+0x37c>)
 80009be:	f001 fa87 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(E5, quarter_note_duration);
 80009c2:	2335      	movs	r3, #53	@ 0x35
 80009c4:	4619      	mov	r1, r3
 80009c6:	2003      	movs	r0, #3
 80009c8:	f7ff fe64 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009d2:	4832      	ldr	r0, [pc, #200]	@ (8000a9c <main+0x37c>)
 80009d4:	f001 fa7c 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 80009d8:	2335      	movs	r3, #53	@ 0x35
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fc36 	bl	800124c <HAL_Delay>


        // F5-G5-A5-G5
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009e6:	482d      	ldr	r0, [pc, #180]	@ (8000a9c <main+0x37c>)
 80009e8:	f001 fa72 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(F5, quarter_note_duration);
 80009ec:	2335      	movs	r3, #53	@ 0x35
 80009ee:	4619      	mov	r1, r3
 80009f0:	2004      	movs	r0, #4
 80009f2:	f7ff fe4f 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009fc:	4827      	ldr	r0, [pc, #156]	@ (8000a9c <main+0x37c>)
 80009fe:	f001 fa67 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 8000a02:	2335      	movs	r3, #53	@ 0x35
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 fc21 	bl	800124c <HAL_Delay>


        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a10:	4822      	ldr	r0, [pc, #136]	@ (8000a9c <main+0x37c>)
 8000a12:	f001 fa5d 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(G5, quarter_note_duration);
 8000a16:	2335      	movs	r3, #53	@ 0x35
 8000a18:	4619      	mov	r1, r3
 8000a1a:	2005      	movs	r0, #5
 8000a1c:	f7ff fe3a 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a26:	481d      	ldr	r0, [pc, #116]	@ (8000a9c <main+0x37c>)
 8000a28:	f001 fa52 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 8000a2c:	2335      	movs	r3, #53	@ 0x35
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fc0c 	bl	800124c <HAL_Delay>


        // A5 всі світлодіоди (довша нота)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000a3a:	4818      	ldr	r0, [pc, #96]	@ (8000a9c <main+0x37c>)
 8000a3c:	f001 fa48 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(A5, half_note_duration);
 8000a40:	236b      	movs	r3, #107	@ 0x6b
 8000a42:	4619      	mov	r1, r3
 8000a44:	2006      	movs	r0, #6
 8000a46:	f7ff fe25 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000a50:	4812      	ldr	r0, [pc, #72]	@ (8000a9c <main+0x37c>)
 8000a52:	f001 fa3d 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(half_note_duration);
 8000a56:	236b      	movs	r3, #107	@ 0x6b
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 fbf7 	bl	800124c <HAL_Delay>


        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a64:	480d      	ldr	r0, [pc, #52]	@ (8000a9c <main+0x37c>)
 8000a66:	f001 fa33 	bl	8001ed0 <HAL_GPIO_WritePin>
        CS43L22_Beep(G5, quarter_note_duration);
 8000a6a:	2335      	movs	r3, #53	@ 0x35
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	2005      	movs	r0, #5
 8000a70:	f7ff fe10 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a7a:	4808      	ldr	r0, [pc, #32]	@ (8000a9c <main+0x37c>)
 8000a7c:	f001 fa28 	bl	8001ed0 <HAL_GPIO_WritePin>
        HAL_Delay(quarter_note_duration);
 8000a80:	2335      	movs	r3, #53	@ 0x35
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fbe2 	bl	800124c <HAL_Delay>


        // F5-A5-F5-D5 (двічі)
        for(int i = 0; i < 2; i++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	e05f      	b.n	8000b4e <main+0x42e>
 8000a8e:	bf00      	nop
 8000a90:	20000124 	.word	0x20000124
 8000a94:	2000007c 	.word	0x2000007c
 8000a98:	200001ec 	.word	0x200001ec
 8000a9c:	40020c00 	.word	0x40020c00
        {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aa6:	4831      	ldr	r0, [pc, #196]	@ (8000b6c <main+0x44c>)
 8000aa8:	f001 fa12 	bl	8001ed0 <HAL_GPIO_WritePin>
            CS43L22_Beep(F5, quarter_note_duration);
 8000aac:	2335      	movs	r3, #53	@ 0x35
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2004      	movs	r0, #4
 8000ab2:	f7ff fdef 	bl	8000694 <CS43L22_Beep>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000abc:	482b      	ldr	r0, [pc, #172]	@ (8000b6c <main+0x44c>)
 8000abe:	f001 fa07 	bl	8001ed0 <HAL_GPIO_WritePin>
            HAL_Delay(quarter_note_duration);
 8000ac2:	2335      	movs	r3, #53	@ 0x35
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fbc1 	bl	800124c <HAL_Delay>


            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000ad0:	4826      	ldr	r0, [pc, #152]	@ (8000b6c <main+0x44c>)
 8000ad2:	f001 f9fd 	bl	8001ed0 <HAL_GPIO_WritePin>
            CS43L22_Beep(A5, quarter_note_duration);
 8000ad6:	2335      	movs	r3, #53	@ 0x35
 8000ad8:	4619      	mov	r1, r3
 8000ada:	2006      	movs	r0, #6
 8000adc:	f7ff fdda 	bl	8000694 <CS43L22_Beep>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000ae6:	4821      	ldr	r0, [pc, #132]	@ (8000b6c <main+0x44c>)
 8000ae8:	f001 f9f2 	bl	8001ed0 <HAL_GPIO_WritePin>
            HAL_Delay(quarter_note_duration);
 8000aec:	2335      	movs	r3, #53	@ 0x35
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fbac 	bl	800124c <HAL_Delay>


            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000afa:	481c      	ldr	r0, [pc, #112]	@ (8000b6c <main+0x44c>)
 8000afc:	f001 f9e8 	bl	8001ed0 <HAL_GPIO_WritePin>
            CS43L22_Beep(F5, quarter_note_duration);
 8000b00:	2335      	movs	r3, #53	@ 0x35
 8000b02:	4619      	mov	r1, r3
 8000b04:	2004      	movs	r0, #4
 8000b06:	f7ff fdc5 	bl	8000694 <CS43L22_Beep>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b10:	4816      	ldr	r0, [pc, #88]	@ (8000b6c <main+0x44c>)
 8000b12:	f001 f9dd 	bl	8001ed0 <HAL_GPIO_WritePin>
            HAL_Delay(quarter_note_duration);
 8000b16:	2335      	movs	r3, #53	@ 0x35
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fb97 	bl	800124c <HAL_Delay>


            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b24:	4811      	ldr	r0, [pc, #68]	@ (8000b6c <main+0x44c>)
 8000b26:	f001 f9d3 	bl	8001ed0 <HAL_GPIO_WritePin>
            CS43L22_Beep(D5, quarter_note_duration);
 8000b2a:	2335      	movs	r3, #53	@ 0x35
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f7ff fdb0 	bl	8000694 <CS43L22_Beep>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b3a:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <main+0x44c>)
 8000b3c:	f001 f9c8 	bl	8001ed0 <HAL_GPIO_WritePin>
            HAL_Delay(quarter_note_duration);
 8000b40:	2335      	movs	r3, #53	@ 0x35
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fb82 	bl	800124c <HAL_Delay>
        for(int i = 0; i < 2; i++)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	dda5      	ble.n	8000aa0 <main+0x380>
        }


        // Збільшуємо лічильник програвань
        play_count++;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <main+0x450>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <main+0x450>)
 8000b5e:	701a      	strb	r2, [r3, #0]


        // Пауза перед повтором всієї мелодії
        HAL_Delay(1000);
 8000b60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b64:	f000 fb72 	bl	800124c <HAL_Delay>
        if(play_count >= max_plays)
 8000b68:	e5f0      	b.n	800074c <main+0x2c>
 8000b6a:	bf00      	nop
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	200001ec 	.word	0x200001ec

08000b74 <MX_GPIO_Init>:
    }
}


static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	@ 0x28
 8000b78:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]


    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c38 <MX_GPIO_Init+0xc4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a29      	ldr	r2, [pc, #164]	@ (8000c38 <MX_GPIO_Init+0xc4>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <MX_GPIO_Init+0xc4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b23      	ldr	r3, [pc, #140]	@ (8000c38 <MX_GPIO_Init+0xc4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a22      	ldr	r2, [pc, #136]	@ (8000c38 <MX_GPIO_Init+0xc4>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b20      	ldr	r3, [pc, #128]	@ (8000c38 <MX_GPIO_Init+0xc4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <MX_GPIO_Init+0xc4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a1b      	ldr	r2, [pc, #108]	@ (8000c38 <MX_GPIO_Init+0xc4>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <MX_GPIO_Init+0xc4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_GPIO_Init+0xc4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a14      	ldr	r2, [pc, #80]	@ (8000c38 <MX_GPIO_Init+0xc4>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <MX_GPIO_Init+0xc4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]


    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	480f      	ldr	r0, [pc, #60]	@ (8000c3c <MX_GPIO_Init+0xc8>)
 8000c00:	f001 f966 	bl	8001ed0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000c0a:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <MX_GPIO_Init+0xc8>)
 8000c0c:	f001 f960 	bl	8001ed0 <HAL_GPIO_WritePin>


    /*Configure GPIO pins : PD4, PD12, PD13, PD14, PD15 */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c10:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <MX_GPIO_Init+0xc8>)
 8000c2a:	f000 ffb5 	bl	8001b98 <HAL_GPIO_Init>
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	@ 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b094      	sub	sp, #80	@ 0x50
 8000c44:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	2230      	movs	r2, #48	@ 0x30
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 f91e 	bl	8003e90 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]


    __HAL_RCC_PLL_PLLM_CONFIG(16);
 8000c64:	4b2b      	ldr	r3, [pc, #172]	@ (8000d14 <SystemClock_Config+0xd4>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c6c:	4a29      	ldr	r2, [pc, #164]	@ (8000d14 <SystemClock_Config+0xd4>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6053      	str	r3, [r2, #4]
    __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000c74:	4b27      	ldr	r3, [pc, #156]	@ (8000d14 <SystemClock_Config+0xd4>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	4a26      	ldr	r2, [pc, #152]	@ (8000d14 <SystemClock_Config+0xd4>)
 8000c7a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000c7e:	6053      	str	r3, [r2, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	4b23      	ldr	r3, [pc, #140]	@ (8000d14 <SystemClock_Config+0xd4>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	4a22      	ldr	r2, [pc, #136]	@ (8000d14 <SystemClock_Config+0xd4>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c90:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <SystemClock_Config+0xd4>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <SystemClock_Config+0xd8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d18 <SystemClock_Config+0xd8>)
 8000ca6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <SystemClock_Config+0xd8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]


    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f002 fb57 	bl	8003384 <HAL_RCC_OscConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0xa0>
    {
        Error_Handler();
 8000cdc:	f000 f89a 	bl	8000e14 <Error_Handler>
    }


    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]


    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fdba 	bl	8003874 <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0xca>
    {
        Error_Handler();
 8000d06:	f000 f885 	bl	8000e14 <Error_Handler>
    }
}
 8000d0a:	bf00      	nop
 8000d0c:	3750      	adds	r7, #80	@ 0x50
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <MX_I2C1_Init>:


static void MX_I2C1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_I2C1_Init+0x50>)
 8000d22:	4a13      	ldr	r2, [pc, #76]	@ (8000d70 <MX_I2C1_Init+0x54>)
 8000d24:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <MX_I2C1_Init+0x50>)
 8000d28:	4a12      	ldr	r2, [pc, #72]	@ (8000d74 <MX_I2C1_Init+0x58>)
 8000d2a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_I2C1_Init+0x50>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_I2C1_Init+0x50>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_I2C1_Init+0x50>)
 8000d3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d3e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <MX_I2C1_Init+0x50>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_I2C1_Init+0x50>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <MX_I2C1_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_I2C1_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <MX_I2C1_Init+0x50>)
 8000d5a:	f001 f8d3 	bl	8001f04 <HAL_I2C_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8000d64:	f000 f856 	bl	8000e14 <Error_Handler>
    }
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000028 	.word	0x20000028
 8000d70:	40005400 	.word	0x40005400
 8000d74:	000186a0 	.word	0x000186a0

08000d78 <MX_I2S3_Init>:


static void MX_I2S3_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
    hi2s3.Instance = SPI3;
 8000d7c:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <MX_I2S3_Init+0x54>)
 8000d7e:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <MX_I2S3_Init+0x58>)
 8000d80:	601a      	str	r2, [r3, #0]
    hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d82:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <MX_I2S3_Init+0x54>)
 8000d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d88:	605a      	str	r2, [r3, #4]
    hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <MX_I2S3_Init+0x54>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
    hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_I2S3_Init+0x54>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
    hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d96:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <MX_I2S3_Init+0x54>)
 8000d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d9c:	611a      	str	r2, [r3, #16]
    hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <MX_I2S3_Init+0x54>)
 8000da0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000da4:	615a      	str	r2, [r3, #20]
    hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_I2S3_Init+0x54>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
    hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000dac:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <MX_I2S3_Init+0x54>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
    hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MX_I2S3_Init+0x54>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
    if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	@ (8000dcc <MX_I2S3_Init+0x54>)
 8000dba:	f001 fd41 	bl	8002840 <HAL_I2S_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_I2S3_Init+0x50>
    {
        Error_Handler();
 8000dc4:	f000 f826 	bl	8000e14 <Error_Handler>
    }
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000007c 	.word	0x2000007c
 8000dd0:	40003c00 	.word	0x40003c00

08000dd4 <MX_DMA_Init>:


static void MX_DMA_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <MX_DMA_Init+0x3c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e10 <MX_DMA_Init+0x3c>)
 8000de4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <MX_DMA_Init+0x3c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2010      	movs	r0, #16
 8000dfc:	f000 fb25 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e00:	2010      	movs	r0, #16
 8000e02:	f000 fb3e 	bl	8001482 <HAL_NVIC_EnableIRQ>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <Error_Handler>:


void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
}
 8000e1a:	bf00      	nop
    __disable_irq();
    while (1) {}
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <Error_Handler+0x8>

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e6c <HAL_MspInit+0x4c>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <HAL_MspInit+0x4c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a08      	ldr	r2, [pc, #32]	@ (8000e6c <HAL_MspInit+0x4c>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_MspInit+0x4c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800

08000e70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	@ (8000ef4 <HAL_I2C_MspInit+0x84>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12c      	bne.n	8000eec <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <HAL_I2C_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a17      	ldr	r2, [pc, #92]	@ (8000ef8 <HAL_I2C_MspInit+0x88>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_I2C_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000eae:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb4:	2312      	movs	r3, #18
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480c      	ldr	r0, [pc, #48]	@ (8000efc <HAL_I2C_MspInit+0x8c>)
 8000ecc:	f000 fe64 	bl	8001b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <HAL_I2C_MspInit+0x88>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	4a07      	ldr	r2, [pc, #28]	@ (8000ef8 <HAL_I2C_MspInit+0x88>)
 8000eda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ede:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <HAL_I2C_MspInit+0x88>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	@ 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020400 	.word	0x40020400

08000f00 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	@ 0x38
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a4e      	ldr	r2, [pc, #312]	@ (8001064 <HAL_I2S_MspInit+0x164>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	f040 8094 	bne.w	800105a <HAL_I2S_MspInit+0x15a>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f32:	2301      	movs	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f36:	23c0      	movs	r3, #192	@ 0xc0
 8000f38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 fe62 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000f4e:	f7ff ff61 	bl	8000e14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b44      	ldr	r3, [pc, #272]	@ (8001068 <HAL_I2S_MspInit+0x168>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	4a43      	ldr	r2, [pc, #268]	@ (8001068 <HAL_I2S_MspInit+0x168>)
 8000f5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f62:	4b41      	ldr	r3, [pc, #260]	@ (8001068 <HAL_I2S_MspInit+0x168>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b3d      	ldr	r3, [pc, #244]	@ (8001068 <HAL_I2S_MspInit+0x168>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a3c      	ldr	r2, [pc, #240]	@ (8001068 <HAL_I2S_MspInit+0x168>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001068 <HAL_I2S_MspInit+0x168>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b36      	ldr	r3, [pc, #216]	@ (8001068 <HAL_I2S_MspInit+0x168>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a35      	ldr	r2, [pc, #212]	@ (8001068 <HAL_I2S_MspInit+0x168>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b33      	ldr	r3, [pc, #204]	@ (8001068 <HAL_I2S_MspInit+0x168>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	482a      	ldr	r0, [pc, #168]	@ (800106c <HAL_I2S_MspInit+0x16c>)
 8000fc2:	f000 fde9 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000fc6:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fd8:	2306      	movs	r3, #6
 8000fda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4823      	ldr	r0, [pc, #140]	@ (8001070 <HAL_I2S_MspInit+0x170>)
 8000fe4:	f000 fdd8 	bl	8001b98 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000fe8:	4b22      	ldr	r3, [pc, #136]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 8000fea:	4a23      	ldr	r2, [pc, #140]	@ (8001078 <HAL_I2S_MspInit+0x178>)
 8000fec:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000fee:	4b21      	ldr	r3, [pc, #132]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 8000ff6:	2240      	movs	r2, #64	@ 0x40
 8000ff8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001000:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 8001002:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001006:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001008:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 800100a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800100e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 8001012:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001016:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 800101a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001020:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 8001022:	2200      	movs	r2, #0
 8001024:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001026:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 8001028:	2204      	movs	r2, #4
 800102a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 800102e:	2203      	movs	r2, #3
 8001030:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 800103a:	2200      	movs	r2, #0
 800103c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800103e:	480d      	ldr	r0, [pc, #52]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 8001040:	f000 fa3a 	bl	80014b8 <HAL_DMA_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 800104a:	f7ff fee3 	bl	8000e14 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 8001052:	639a      	str	r2, [r3, #56]	@ 0x38
 8001054:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <HAL_I2S_MspInit+0x174>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800105a:	bf00      	nop
 800105c:	3738      	adds	r7, #56	@ 0x38
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40003c00 	.word	0x40003c00
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020800 	.word	0x40020800
 8001074:	200000c4 	.word	0x200000c4
 8001078:	40026088 	.word	0x40026088

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <NMI_Handler+0x4>

08001084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <MemManage_Handler+0x4>

08001094 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d2:	f000 f89b 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <DMA1_Stream5_IRQHandler+0x10>)
 80010e2:	f000 faef 	bl	80016c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200000c4 	.word	0x200000c4

080010f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <SystemInit+0x20>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010fa:	4a05      	ldr	r2, [pc, #20]	@ (8001110 <SystemInit+0x20>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800114c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001118:	f7ff ffea 	bl	80010f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111e:	490d      	ldr	r1, [pc, #52]	@ (8001154 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001120:	4a0d      	ldr	r2, [pc, #52]	@ (8001158 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001134:	4c0a      	ldr	r4, [pc, #40]	@ (8001160 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001142:	f002 fead 	bl	8003ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001146:	f7ff faeb 	bl	8000720 <main>
  bx  lr    
 800114a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800114c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001158:	08003f30 	.word	0x08003f30
  ldr r2, =_sbss
 800115c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001160:	200001f4 	.word	0x200001f4

08001164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC_IRQHandler>
	...

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800116c:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0d      	ldr	r2, [pc, #52]	@ (80011a8 <HAL_Init+0x40>)
 8001172:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001178:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <HAL_Init+0x40>)
 800117e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a07      	ldr	r2, [pc, #28]	@ (80011a8 <HAL_Init+0x40>)
 800118a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f94f 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001196:	200f      	movs	r0, #15
 8001198:	f000 f808 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff fe40 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023c00 	.word	0x40023c00

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_InitTick+0x54>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_InitTick+0x58>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f967 	bl	800149e <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00e      	b.n	80011f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d80a      	bhi.n	80011f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f000 f92f 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ec:	4a06      	ldr	r2, [pc, #24]	@ (8001208 <HAL_InitTick+0x5c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	20000008 	.word	0x20000008
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008
 8001230:	200001f0 	.word	0x200001f0

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	@ (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200001f0 	.word	0x200001f0

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff ffee 	bl	8001234 <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d005      	beq.n	8001272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001266:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <HAL_Delay+0x44>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001272:	bf00      	nop
 8001274:	f7ff ffde 	bl	8001234 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8f7      	bhi.n	8001274 <HAL_Delay+0x28>
  {
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	@ (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	@ (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	@ (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	@ 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff29 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff3e 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff8e 	bl	8001388 <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff31 	bl	80012f8 <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa2 	bl	80013f0 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff feb6 	bl	8001234 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e099      	b.n	8001608 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f4:	e00f      	b.n	8001516 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014f6:	f7ff fe9d 	bl	8001234 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b05      	cmp	r3, #5
 8001502:	d908      	bls.n	8001516 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2220      	movs	r2, #32
 8001508:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2203      	movs	r2, #3
 800150e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e078      	b.n	8001608 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1e8      	bne.n	80014f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	4b38      	ldr	r3, [pc, #224]	@ (8001610 <HAL_DMA_Init+0x158>)
 8001530:	4013      	ands	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001542:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4313      	orrs	r3, r2
 8001566:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156c:	2b04      	cmp	r3, #4
 800156e:	d107      	bne.n	8001580 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001578:	4313      	orrs	r3, r2
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	4313      	orrs	r3, r2
 800157e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f023 0307 	bic.w	r3, r3, #7
 8001596:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	4313      	orrs	r3, r2
 80015a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d117      	bne.n	80015da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00e      	beq.n	80015da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fa6f 	bl	8001aa0 <DMA_CheckFifoParam>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2240      	movs	r2, #64	@ 0x40
 80015cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80015d6:	2301      	movs	r3, #1
 80015d8:	e016      	b.n	8001608 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fa26 	bl	8001a34 <DMA_CalcBaseAndBitshift>
 80015e8:	4603      	mov	r3, r0
 80015ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f0:	223f      	movs	r2, #63	@ 0x3f
 80015f2:	409a      	lsls	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	f010803f 	.word	0xf010803f

08001614 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_DMA_Start_IT+0x26>
 8001636:	2302      	movs	r3, #2
 8001638:	e040      	b.n	80016bc <HAL_DMA_Start_IT+0xa8>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b01      	cmp	r3, #1
 800164c:	d12f      	bne.n	80016ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2202      	movs	r2, #2
 8001652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f9b8 	bl	80019d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166c:	223f      	movs	r2, #63	@ 0x3f
 800166e:	409a      	lsls	r2, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0216 	orr.w	r2, r2, #22
 8001682:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	2b00      	cmp	r3, #0
 800168a:	d007      	beq.n	800169c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0208 	orr.w	r2, r2, #8
 800169a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e005      	b.n	80016ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016b6:	2302      	movs	r3, #2
 80016b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016d0:	4b8e      	ldr	r3, [pc, #568]	@ (800190c <HAL_DMA_IRQHandler+0x248>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a8e      	ldr	r2, [pc, #568]	@ (8001910 <HAL_DMA_IRQHandler+0x24c>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0a9b      	lsrs	r3, r3, #10
 80016dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ee:	2208      	movs	r2, #8
 80016f0:	409a      	lsls	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d01a      	beq.n	8001730 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d013      	beq.n	8001730 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0204 	bic.w	r2, r2, #4
 8001716:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171c:	2208      	movs	r2, #8
 800171e:	409a      	lsls	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001728:	f043 0201 	orr.w	r2, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001734:	2201      	movs	r2, #1
 8001736:	409a      	lsls	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d012      	beq.n	8001766 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00b      	beq.n	8001766 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001752:	2201      	movs	r2, #1
 8001754:	409a      	lsls	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800175e:	f043 0202 	orr.w	r2, r3, #2
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800176a:	2204      	movs	r2, #4
 800176c:	409a      	lsls	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d012      	beq.n	800179c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00b      	beq.n	800179c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001788:	2204      	movs	r2, #4
 800178a:	409a      	lsls	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001794:	f043 0204 	orr.w	r2, r3, #4
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a0:	2210      	movs	r2, #16
 80017a2:	409a      	lsls	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d043      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d03c      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017be:	2210      	movs	r2, #16
 80017c0:	409a      	lsls	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d018      	beq.n	8001806 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d108      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d024      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	4798      	blx	r3
 80017f2:	e01f      	b.n	8001834 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01b      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
 8001804:	e016      	b.n	8001834 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d107      	bne.n	8001824 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0208 	bic.w	r2, r2, #8
 8001822:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001838:	2220      	movs	r2, #32
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 808f 	beq.w	8001964 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8087 	beq.w	8001964 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185a:	2220      	movs	r2, #32
 800185c:	409a      	lsls	r2, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b05      	cmp	r3, #5
 800186c:	d136      	bne.n	80018dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0216 	bic.w	r2, r2, #22
 800187c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800188c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d103      	bne.n	800189e <HAL_DMA_IRQHandler+0x1da>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0208 	bic.w	r2, r2, #8
 80018ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b2:	223f      	movs	r2, #63	@ 0x3f
 80018b4:	409a      	lsls	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d07e      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	4798      	blx	r3
        }
        return;
 80018da:	e079      	b.n	80019d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d01d      	beq.n	8001926 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10d      	bne.n	8001914 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d031      	beq.n	8001964 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	4798      	blx	r3
 8001908:	e02c      	b.n	8001964 <HAL_DMA_IRQHandler+0x2a0>
 800190a:	bf00      	nop
 800190c:	20000000 	.word	0x20000000
 8001910:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d023      	beq.n	8001964 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	4798      	blx	r3
 8001924:	e01e      	b.n	8001964 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10f      	bne.n	8001954 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0210 	bic.w	r2, r2, #16
 8001942:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001968:	2b00      	cmp	r3, #0
 800196a:	d032      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d022      	beq.n	80019be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2205      	movs	r2, #5
 800197c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	3301      	adds	r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	d307      	bcc.n	80019ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f2      	bne.n	8001990 <HAL_DMA_IRQHandler+0x2cc>
 80019aa:	e000      	b.n	80019ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	4798      	blx	r3
 80019ce:	e000      	b.n	80019d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80019d0:	bf00      	nop
    }
  }
}
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80019f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b40      	cmp	r3, #64	@ 0x40
 8001a04:	d108      	bne.n	8001a18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a16:	e007      	b.n	8001a28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	60da      	str	r2, [r3, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	3b10      	subs	r3, #16
 8001a44:	4a14      	ldr	r2, [pc, #80]	@ (8001a98 <DMA_CalcBaseAndBitshift+0x64>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a4e:	4a13      	ldr	r2, [pc, #76]	@ (8001a9c <DMA_CalcBaseAndBitshift+0x68>)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d909      	bls.n	8001a76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a6a:	f023 0303 	bic.w	r3, r3, #3
 8001a6e:	1d1a      	adds	r2, r3, #4
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a74:	e007      	b.n	8001a86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a7e:	f023 0303 	bic.w	r3, r3, #3
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	aaaaaaab 	.word	0xaaaaaaab
 8001a9c:	08003f18 	.word	0x08003f18

08001aa0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d11f      	bne.n	8001afa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d856      	bhi.n	8001b6e <DMA_CheckFifoParam+0xce>
 8001ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac8 <DMA_CheckFifoParam+0x28>)
 8001ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac6:	bf00      	nop
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001aeb 	.word	0x08001aeb
 8001ad0:	08001ad9 	.word	0x08001ad9
 8001ad4:	08001b6f 	.word	0x08001b6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001adc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d046      	beq.n	8001b72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ae8:	e043      	b.n	8001b72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001af2:	d140      	bne.n	8001b76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af8:	e03d      	b.n	8001b76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b02:	d121      	bne.n	8001b48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d837      	bhi.n	8001b7a <DMA_CheckFifoParam+0xda>
 8001b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b10 <DMA_CheckFifoParam+0x70>)
 8001b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b10:	08001b21 	.word	0x08001b21
 8001b14:	08001b27 	.word	0x08001b27
 8001b18:	08001b21 	.word	0x08001b21
 8001b1c:	08001b39 	.word	0x08001b39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
      break;
 8001b24:	e030      	b.n	8001b88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d025      	beq.n	8001b7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b36:	e022      	b.n	8001b7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b40:	d11f      	bne.n	8001b82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b46:	e01c      	b.n	8001b82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d903      	bls.n	8001b56 <DMA_CheckFifoParam+0xb6>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d003      	beq.n	8001b5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b54:	e018      	b.n	8001b88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
      break;
 8001b5a:	e015      	b.n	8001b88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00e      	beq.n	8001b86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b6c:	e00b      	b.n	8001b86 <DMA_CheckFifoParam+0xe6>
      break;
 8001b6e:	bf00      	nop
 8001b70:	e00a      	b.n	8001b88 <DMA_CheckFifoParam+0xe8>
      break;
 8001b72:	bf00      	nop
 8001b74:	e008      	b.n	8001b88 <DMA_CheckFifoParam+0xe8>
      break;
 8001b76:	bf00      	nop
 8001b78:	e006      	b.n	8001b88 <DMA_CheckFifoParam+0xe8>
      break;
 8001b7a:	bf00      	nop
 8001b7c:	e004      	b.n	8001b88 <DMA_CheckFifoParam+0xe8>
      break;
 8001b7e:	bf00      	nop
 8001b80:	e002      	b.n	8001b88 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b82:	bf00      	nop
 8001b84:	e000      	b.n	8001b88 <DMA_CheckFifoParam+0xe8>
      break;
 8001b86:	bf00      	nop
    }
  } 
  
  return status; 
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	@ 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	e16b      	b.n	8001e8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	f040 815a 	bne.w	8001e86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d005      	beq.n	8001bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d130      	bne.n	8001c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c20:	2201      	movs	r2, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 0201 	and.w	r2, r3, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d017      	beq.n	8001c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d123      	bne.n	8001cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	69b9      	ldr	r1, [r7, #24]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80b4 	beq.w	8001e86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b60      	ldr	r3, [pc, #384]	@ (8001ea4 <HAL_GPIO_Init+0x30c>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	4a5f      	ldr	r2, [pc, #380]	@ (8001ea4 <HAL_GPIO_Init+0x30c>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ea4 <HAL_GPIO_Init+0x30c>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ea8 <HAL_GPIO_Init+0x310>)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	220f      	movs	r2, #15
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a52      	ldr	r2, [pc, #328]	@ (8001eac <HAL_GPIO_Init+0x314>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d02b      	beq.n	8001dbe <HAL_GPIO_Init+0x226>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a51      	ldr	r2, [pc, #324]	@ (8001eb0 <HAL_GPIO_Init+0x318>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d025      	beq.n	8001dba <HAL_GPIO_Init+0x222>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a50      	ldr	r2, [pc, #320]	@ (8001eb4 <HAL_GPIO_Init+0x31c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01f      	beq.n	8001db6 <HAL_GPIO_Init+0x21e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb8 <HAL_GPIO_Init+0x320>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d019      	beq.n	8001db2 <HAL_GPIO_Init+0x21a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4e      	ldr	r2, [pc, #312]	@ (8001ebc <HAL_GPIO_Init+0x324>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_GPIO_Init+0x216>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec0 <HAL_GPIO_Init+0x328>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00d      	beq.n	8001daa <HAL_GPIO_Init+0x212>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec4 <HAL_GPIO_Init+0x32c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d007      	beq.n	8001da6 <HAL_GPIO_Init+0x20e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4b      	ldr	r2, [pc, #300]	@ (8001ec8 <HAL_GPIO_Init+0x330>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d101      	bne.n	8001da2 <HAL_GPIO_Init+0x20a>
 8001d9e:	2307      	movs	r3, #7
 8001da0:	e00e      	b.n	8001dc0 <HAL_GPIO_Init+0x228>
 8001da2:	2308      	movs	r3, #8
 8001da4:	e00c      	b.n	8001dc0 <HAL_GPIO_Init+0x228>
 8001da6:	2306      	movs	r3, #6
 8001da8:	e00a      	b.n	8001dc0 <HAL_GPIO_Init+0x228>
 8001daa:	2305      	movs	r3, #5
 8001dac:	e008      	b.n	8001dc0 <HAL_GPIO_Init+0x228>
 8001dae:	2304      	movs	r3, #4
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x228>
 8001db2:	2303      	movs	r3, #3
 8001db4:	e004      	b.n	8001dc0 <HAL_GPIO_Init+0x228>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e002      	b.n	8001dc0 <HAL_GPIO_Init+0x228>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x228>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	f002 0203 	and.w	r2, r2, #3
 8001dc6:	0092      	lsls	r2, r2, #2
 8001dc8:	4093      	lsls	r3, r2
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd0:	4935      	ldr	r1, [pc, #212]	@ (8001ea8 <HAL_GPIO_Init+0x310>)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dde:	4b3b      	ldr	r3, [pc, #236]	@ (8001ecc <HAL_GPIO_Init+0x334>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e02:	4a32      	ldr	r2, [pc, #200]	@ (8001ecc <HAL_GPIO_Init+0x334>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e08:	4b30      	ldr	r3, [pc, #192]	@ (8001ecc <HAL_GPIO_Init+0x334>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e2c:	4a27      	ldr	r2, [pc, #156]	@ (8001ecc <HAL_GPIO_Init+0x334>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e32:	4b26      	ldr	r3, [pc, #152]	@ (8001ecc <HAL_GPIO_Init+0x334>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e56:	4a1d      	ldr	r2, [pc, #116]	@ (8001ecc <HAL_GPIO_Init+0x334>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <HAL_GPIO_Init+0x334>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e80:	4a12      	ldr	r2, [pc, #72]	@ (8001ecc <HAL_GPIO_Init+0x334>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b0f      	cmp	r3, #15
 8001e90:	f67f ae90 	bls.w	8001bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3724      	adds	r7, #36	@ 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020c00 	.word	0x40020c00
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40021400 	.word	0x40021400
 8001ec4:	40021800 	.word	0x40021800
 8001ec8:	40021c00 	.word	0x40021c00
 8001ecc:	40013c00 	.word	0x40013c00

08001ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
 8001edc:	4613      	mov	r3, r2
 8001ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee0:	787b      	ldrb	r3, [r7, #1]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eec:	e003      	b.n	8001ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	041a      	lsls	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	619a      	str	r2, [r3, #24]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e12b      	b.n	800216e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe ffa0 	bl	8000e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2224      	movs	r2, #36	@ 0x24
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f68:	f001 fe3c 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 8001f6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4a81      	ldr	r2, [pc, #516]	@ (8002178 <HAL_I2C_Init+0x274>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d807      	bhi.n	8001f88 <HAL_I2C_Init+0x84>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4a80      	ldr	r2, [pc, #512]	@ (800217c <HAL_I2C_Init+0x278>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	bf94      	ite	ls
 8001f80:	2301      	movls	r3, #1
 8001f82:	2300      	movhi	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	e006      	b.n	8001f96 <HAL_I2C_Init+0x92>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4a7d      	ldr	r2, [pc, #500]	@ (8002180 <HAL_I2C_Init+0x27c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	bf94      	ite	ls
 8001f90:	2301      	movls	r3, #1
 8001f92:	2300      	movhi	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0e7      	b.n	800216e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4a78      	ldr	r2, [pc, #480]	@ (8002184 <HAL_I2C_Init+0x280>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	0c9b      	lsrs	r3, r3, #18
 8001fa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a6a      	ldr	r2, [pc, #424]	@ (8002178 <HAL_I2C_Init+0x274>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d802      	bhi.n	8001fd8 <HAL_I2C_Init+0xd4>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	e009      	b.n	8001fec <HAL_I2C_Init+0xe8>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	4a69      	ldr	r2, [pc, #420]	@ (8002188 <HAL_I2C_Init+0x284>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	3301      	adds	r3, #1
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ffe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	495c      	ldr	r1, [pc, #368]	@ (8002178 <HAL_I2C_Init+0x274>)
 8002008:	428b      	cmp	r3, r1
 800200a:	d819      	bhi.n	8002040 <HAL_I2C_Init+0x13c>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1e59      	subs	r1, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fbb1 f3f3 	udiv	r3, r1, r3
 800201a:	1c59      	adds	r1, r3, #1
 800201c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002020:	400b      	ands	r3, r1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_I2C_Init+0x138>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1e59      	subs	r1, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fbb1 f3f3 	udiv	r3, r1, r3
 8002034:	3301      	adds	r3, #1
 8002036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203a:	e051      	b.n	80020e0 <HAL_I2C_Init+0x1dc>
 800203c:	2304      	movs	r3, #4
 800203e:	e04f      	b.n	80020e0 <HAL_I2C_Init+0x1dc>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d111      	bne.n	800206c <HAL_I2C_Init+0x168>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1e58      	subs	r0, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	440b      	add	r3, r1
 8002056:	fbb0 f3f3 	udiv	r3, r0, r3
 800205a:	3301      	adds	r3, #1
 800205c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e012      	b.n	8002092 <HAL_I2C_Init+0x18e>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1e58      	subs	r0, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	0099      	lsls	r1, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002082:	3301      	adds	r3, #1
 8002084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_I2C_Init+0x196>
 8002096:	2301      	movs	r3, #1
 8002098:	e022      	b.n	80020e0 <HAL_I2C_Init+0x1dc>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10e      	bne.n	80020c0 <HAL_I2C_Init+0x1bc>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1e58      	subs	r0, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6859      	ldr	r1, [r3, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	440b      	add	r3, r1
 80020b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020be:	e00f      	b.n	80020e0 <HAL_I2C_Init+0x1dc>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e58      	subs	r0, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	0099      	lsls	r1, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	6809      	ldr	r1, [r1, #0]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69da      	ldr	r2, [r3, #28]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800210e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6911      	ldr	r1, [r2, #16]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68d2      	ldr	r2, [r2, #12]
 800211a:	4311      	orrs	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	430b      	orrs	r3, r1
 8002122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	000186a0 	.word	0x000186a0
 800217c:	001e847f 	.word	0x001e847f
 8002180:	003d08ff 	.word	0x003d08ff
 8002184:	431bde83 	.word	0x431bde83
 8002188:	10624dd3 	.word	0x10624dd3

0800218c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af02      	add	r7, sp, #8
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	460b      	mov	r3, r1
 800219a:	817b      	strh	r3, [r7, #10]
 800219c:	4613      	mov	r3, r2
 800219e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff f848 	bl	8001234 <HAL_GetTick>
 80021a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	f040 80e0 	bne.w	8002374 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2319      	movs	r3, #25
 80021ba:	2201      	movs	r2, #1
 80021bc:	4970      	ldr	r1, [pc, #448]	@ (8002380 <HAL_I2C_Master_Transmit+0x1f4>)
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f964 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021ca:	2302      	movs	r3, #2
 80021cc:	e0d3      	b.n	8002376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_I2C_Master_Transmit+0x50>
 80021d8:	2302      	movs	r3, #2
 80021da:	e0cc      	b.n	8002376 <HAL_I2C_Master_Transmit+0x1ea>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d007      	beq.n	8002202 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2221      	movs	r2, #33	@ 0x21
 8002216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2210      	movs	r2, #16
 800221e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	893a      	ldrh	r2, [r7, #8]
 8002232:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4a50      	ldr	r2, [pc, #320]	@ (8002384 <HAL_I2C_Master_Transmit+0x1f8>)
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002244:	8979      	ldrh	r1, [r7, #10]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	6a3a      	ldr	r2, [r7, #32]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f89c 	bl	8002388 <I2C_MasterRequestWrite>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e08d      	b.n	8002376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002270:	e066      	b.n	8002340 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	6a39      	ldr	r1, [r7, #32]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fa22 	bl	80026c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00d      	beq.n	800229e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	2b04      	cmp	r3, #4
 8002288:	d107      	bne.n	800229a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e06b      	b.n	8002376 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d11b      	bne.n	8002314 <HAL_I2C_Master_Transmit+0x188>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d017      	beq.n	8002314 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	6a39      	ldr	r1, [r7, #32]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fa19 	bl	8002750 <I2C_WaitOnBTFFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00d      	beq.n	8002340 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	2b04      	cmp	r3, #4
 800232a:	d107      	bne.n	800233c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e01a      	b.n	8002376 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d194      	bne.n	8002272 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	e000      	b.n	8002376 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002374:	2302      	movs	r3, #2
  }
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	00100002 	.word	0x00100002
 8002384:	ffff0000 	.word	0xffff0000

08002388 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	460b      	mov	r3, r1
 8002396:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d006      	beq.n	80023b2 <I2C_MasterRequestWrite+0x2a>
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d003      	beq.n	80023b2 <I2C_MasterRequestWrite+0x2a>
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023b0:	d108      	bne.n	80023c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e00b      	b.n	80023dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	2b12      	cmp	r3, #18
 80023ca:	d107      	bne.n	80023dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f84f 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002402:	d103      	bne.n	800240c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e035      	b.n	800247c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002418:	d108      	bne.n	800242c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800241a:	897b      	ldrh	r3, [r7, #10]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	e01b      	b.n	8002464 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800242c:	897b      	ldrh	r3, [r7, #10]
 800242e:	11db      	asrs	r3, r3, #7
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f003 0306 	and.w	r3, r3, #6
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f063 030f 	orn	r3, r3, #15
 800243c:	b2da      	uxtb	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	490e      	ldr	r1, [pc, #56]	@ (8002484 <I2C_MasterRequestWrite+0xfc>)
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f898 	bl	8002580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e010      	b.n	800247c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800245a:	897b      	ldrh	r3, [r7, #10]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4907      	ldr	r1, [pc, #28]	@ (8002488 <I2C_MasterRequestWrite+0x100>)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f888 	bl	8002580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	00010008 	.word	0x00010008
 8002488:	00010002 	.word	0x00010002

0800248c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800249c:	e048      	b.n	8002530 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a4:	d044      	beq.n	8002530 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a6:	f7fe fec5 	bl	8001234 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d302      	bcc.n	80024bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d139      	bne.n	8002530 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	0c1b      	lsrs	r3, r3, #16
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d10d      	bne.n	80024e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	43da      	mvns	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4013      	ands	r3, r2
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	e00c      	b.n	80024fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	43da      	mvns	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4013      	ands	r3, r2
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d116      	bne.n	8002530 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e023      	b.n	8002578 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	0c1b      	lsrs	r3, r3, #16
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10d      	bne.n	8002556 <I2C_WaitOnFlagUntilTimeout+0xca>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	43da      	mvns	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4013      	ands	r3, r2
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	e00c      	b.n	8002570 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	43da      	mvns	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	429a      	cmp	r2, r3
 8002574:	d093      	beq.n	800249e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800258e:	e071      	b.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800259e:	d123      	bne.n	80025e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	f043 0204 	orr.w	r2, r3, #4
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e067      	b.n	80026b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d041      	beq.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f0:	f7fe fe20 	bl	8001234 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d302      	bcc.n	8002606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d136      	bne.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d10c      	bne.n	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4013      	ands	r3, r2
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	bf14      	ite	ne
 8002622:	2301      	movne	r3, #1
 8002624:	2300      	moveq	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	e00b      	b.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	43da      	mvns	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4013      	ands	r3, r2
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d016      	beq.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e021      	b.n	80026b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	0c1b      	lsrs	r3, r3, #16
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d10c      	bne.n	8002698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	43da      	mvns	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4013      	ands	r3, r2
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf14      	ite	ne
 8002690:	2301      	movne	r3, #1
 8002692:	2300      	moveq	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	e00b      	b.n	80026b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4013      	ands	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f47f af6d 	bne.w	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026cc:	e034      	b.n	8002738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f886 	bl	80027e0 <I2C_IsAcknowledgeFailed>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e034      	b.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d028      	beq.n	8002738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e6:	f7fe fda5 	bl	8001234 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d302      	bcc.n	80026fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d11d      	bne.n	8002738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002706:	2b80      	cmp	r3, #128	@ 0x80
 8002708:	d016      	beq.n	8002738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	f043 0220 	orr.w	r2, r3, #32
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e007      	b.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002742:	2b80      	cmp	r3, #128	@ 0x80
 8002744:	d1c3      	bne.n	80026ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800275c:	e034      	b.n	80027c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f83e 	bl	80027e0 <I2C_IsAcknowledgeFailed>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e034      	b.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d028      	beq.n	80027c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002776:	f7fe fd5d 	bl	8001234 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	429a      	cmp	r2, r3
 8002784:	d302      	bcc.n	800278c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d11d      	bne.n	80027c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b04      	cmp	r3, #4
 8002798:	d016      	beq.n	80027c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	f043 0220 	orr.w	r2, r3, #32
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e007      	b.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d1c3      	bne.n	800275e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027f6:	d11b      	bne.n	8002830 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002800:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	f043 0204 	orr.w	r2, r3, #4
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e128      	b.n	8002aa4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a90      	ldr	r2, [pc, #576]	@ (8002aac <HAL_I2S_Init+0x26c>)
 800286a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7fe fb47 	bl	8000f00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002888:	f023 030f 	bic.w	r3, r3, #15
 800288c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2202      	movs	r2, #2
 8002894:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d060      	beq.n	8002960 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d102      	bne.n	80028ac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80028a6:	2310      	movs	r3, #16
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e001      	b.n	80028b0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80028ac:	2320      	movs	r3, #32
 80028ae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d802      	bhi.n	80028be <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80028be:	2001      	movs	r0, #1
 80028c0:	f001 fa86 	bl	8003dd0 <HAL_RCCEx_GetPeriphCLKFreq>
 80028c4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028ce:	d125      	bne.n	800291c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d010      	beq.n	80028fa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	fbb2 f2f3 	udiv	r2, r2, r3
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	461a      	mov	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	3305      	adds	r3, #5
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	e01f      	b.n	800293a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	fbb2 f2f3 	udiv	r2, r2, r3
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	3305      	adds	r3, #5
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	e00e      	b.n	800293a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	fbb2 f2f3 	udiv	r2, r2, r3
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	461a      	mov	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	3305      	adds	r3, #5
 8002938:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ab0 <HAL_I2S_Init+0x270>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	08db      	lsrs	r3, r3, #3
 8002944:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	e003      	b.n	8002968 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002960:	2302      	movs	r3, #2
 8002962:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d902      	bls.n	8002974 <HAL_I2S_Init+0x134>
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	2bff      	cmp	r3, #255	@ 0xff
 8002972:	d907      	bls.n	8002984 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002978:	f043 0210 	orr.w	r2, r3, #16
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e08f      	b.n	8002aa4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	ea42 0103 	orr.w	r1, r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	430a      	orrs	r2, r1
 8002996:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80029a2:	f023 030f 	bic.w	r3, r3, #15
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6851      	ldr	r1, [r2, #4]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6892      	ldr	r2, [r2, #8]
 80029ae:	4311      	orrs	r1, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68d2      	ldr	r2, [r2, #12]
 80029b4:	4311      	orrs	r1, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6992      	ldr	r2, [r2, #24]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029c6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d161      	bne.n	8002a94 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a38      	ldr	r2, [pc, #224]	@ (8002ab4 <HAL_I2S_Init+0x274>)
 80029d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a37      	ldr	r2, [pc, #220]	@ (8002ab8 <HAL_I2S_Init+0x278>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_I2S_Init+0x1a4>
 80029e0:	4b36      	ldr	r3, [pc, #216]	@ (8002abc <HAL_I2S_Init+0x27c>)
 80029e2:	e001      	b.n	80029e8 <HAL_I2S_Init+0x1a8>
 80029e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	4932      	ldr	r1, [pc, #200]	@ (8002ab8 <HAL_I2S_Init+0x278>)
 80029f0:	428a      	cmp	r2, r1
 80029f2:	d101      	bne.n	80029f8 <HAL_I2S_Init+0x1b8>
 80029f4:	4a31      	ldr	r2, [pc, #196]	@ (8002abc <HAL_I2S_Init+0x27c>)
 80029f6:	e001      	b.n	80029fc <HAL_I2S_Init+0x1bc>
 80029f8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80029fc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002a00:	f023 030f 	bic.w	r3, r3, #15
 8002a04:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab8 <HAL_I2S_Init+0x278>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_I2S_Init+0x1d4>
 8002a10:	4b2a      	ldr	r3, [pc, #168]	@ (8002abc <HAL_I2S_Init+0x27c>)
 8002a12:	e001      	b.n	8002a18 <HAL_I2S_Init+0x1d8>
 8002a14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a18:	2202      	movs	r2, #2
 8002a1a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a25      	ldr	r2, [pc, #148]	@ (8002ab8 <HAL_I2S_Init+0x278>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_I2S_Init+0x1ea>
 8002a26:	4b25      	ldr	r3, [pc, #148]	@ (8002abc <HAL_I2S_Init+0x27c>)
 8002a28:	e001      	b.n	8002a2e <HAL_I2S_Init+0x1ee>
 8002a2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a3a:	d003      	beq.n	8002a44 <HAL_I2S_Init+0x204>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002a44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	e001      	b.n	8002a50 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a64:	4313      	orrs	r3, r2
 8002a66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	897b      	ldrh	r3, [r7, #10]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a7c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab8 <HAL_I2S_Init+0x278>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d101      	bne.n	8002a8c <HAL_I2S_Init+0x24c>
 8002a88:	4b0c      	ldr	r3, [pc, #48]	@ (8002abc <HAL_I2S_Init+0x27c>)
 8002a8a:	e001      	b.n	8002a90 <HAL_I2S_Init+0x250>
 8002a8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a90:	897a      	ldrh	r2, [r7, #10]
 8002a92:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3720      	adds	r7, #32
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	08002dbd 	.word	0x08002dbd
 8002ab0:	cccccccd 	.word	0xcccccccd
 8002ab4:	08002ed1 	.word	0x08002ed1
 8002ab8:	40003800 	.word	0x40003800
 8002abc:	40003400 	.word	0x40003400

08002ac0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_I2S_Transmit_DMA+0x1a>
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e08a      	b.n	8002bf4 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d001      	beq.n	8002aee <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
 8002aec:	e082      	b.n	8002bf4 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_I2S_Transmit_DMA+0x3e>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e07a      	b.n	8002bf4 <HAL_I2S_Transmit_DMA+0x134>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d002      	beq.n	8002b32 <HAL_I2S_Transmit_DMA+0x72>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d10a      	bne.n	8002b48 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b46:	e005      	b.n	8002b54 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	88fa      	ldrh	r2, [r7, #6]
 8002b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	88fa      	ldrh	r2, [r7, #6]
 8002b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b58:	4a28      	ldr	r2, [pc, #160]	@ (8002bfc <HAL_I2S_Transmit_DMA+0x13c>)
 8002b5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b60:	4a27      	ldr	r2, [pc, #156]	@ (8002c00 <HAL_I2S_Transmit_DMA+0x140>)
 8002b62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b68:	4a26      	ldr	r2, [pc, #152]	@ (8002c04 <HAL_I2S_Transmit_DMA+0x144>)
 8002b6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002b74:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002b7c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b82:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002b84:	f7fe fd46 	bl	8001614 <HAL_DMA_Start_IT>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00f      	beq.n	8002bae <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	f043 0208 	orr.w	r2, r3, #8
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e022      	b.n	8002bf4 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0202 	orr.w	r2, r2, #2
 8002bd2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d107      	bne.n	8002bf2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bf0:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	08002c9b 	.word	0x08002c9b
 8002c00:	08002c59 	.word	0x08002c59
 8002c04:	08002cb7 	.word	0x08002cb7

08002c08 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c64:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10e      	bne.n	8002c8c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0202 	bic.w	r2, r2, #2
 8002c7c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff ffc5 	bl	8002c1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff ffad 	bl	8002c08 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0203 	bic.w	r2, r2, #3
 8002cd2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cec:	f043 0208 	orr.w	r2, r3, #8
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff ffa5 	bl	8002c44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	881a      	ldrh	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	1c9a      	adds	r2, r3, #2
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10e      	bne.n	8002d56 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d46:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ff63 	bl	8002c1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	b292      	uxth	r2, r2
 8002d72:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	1c9a      	adds	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10e      	bne.n	8002db4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002da4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ff3e 	bl	8002c30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d13a      	bne.n	8002e4e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d109      	bne.n	8002df6 <I2S_IRQHandler+0x3a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dec:	2b40      	cmp	r3, #64	@ 0x40
 8002dee:	d102      	bne.n	8002df6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff ffb4 	bl	8002d5e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfc:	2b40      	cmp	r3, #64	@ 0x40
 8002dfe:	d126      	bne.n	8002e4e <I2S_IRQHandler+0x92>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d11f      	bne.n	8002e4e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e1c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e40:	f043 0202 	orr.w	r2, r3, #2
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff fefb 	bl	8002c44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d136      	bne.n	8002ec8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d109      	bne.n	8002e78 <I2S_IRQHandler+0xbc>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e6e:	2b80      	cmp	r3, #128	@ 0x80
 8002e70:	d102      	bne.n	8002e78 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ff45 	bl	8002d02 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d122      	bne.n	8002ec8 <I2S_IRQHandler+0x10c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d11b      	bne.n	8002ec8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e9e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f043 0204 	orr.w	r2, r3, #4
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff febe 	bl	8002c44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ec8:	bf00      	nop
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a92      	ldr	r2, [pc, #584]	@ (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d101      	bne.n	8002eee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002eea:	4b92      	ldr	r3, [pc, #584]	@ (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002eec:	e001      	b.n	8002ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002eee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a8b      	ldr	r2, [pc, #556]	@ (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d101      	bne.n	8002f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002f08:	4b8a      	ldr	r3, [pc, #552]	@ (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f0a:	e001      	b.n	8002f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002f0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f1c:	d004      	beq.n	8002f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 8099 	bne.w	800305a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d107      	bne.n	8002f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f925 	bl	800318c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d107      	bne.n	8002f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f9c8 	bl	80032ec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f62:	2b40      	cmp	r3, #64	@ 0x40
 8002f64:	d13a      	bne.n	8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d035      	beq.n	8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6e      	ldr	r2, [pc, #440]	@ (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d101      	bne.n	8002f7e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002f7a:	4b6e      	ldr	r3, [pc, #440]	@ (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f7c:	e001      	b.n	8002f82 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002f7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4969      	ldr	r1, [pc, #420]	@ (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f8a:	428b      	cmp	r3, r1
 8002f8c:	d101      	bne.n	8002f92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002f8e:	4b69      	ldr	r3, [pc, #420]	@ (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f90:	e001      	b.n	8002f96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002f92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f9a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002faa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fce:	f043 0202 	orr.w	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fe34 	bl	8002c44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	f040 80c3 	bne.w	800316e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80bd 	beq.w	800316e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003002:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a49      	ldr	r2, [pc, #292]	@ (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800300e:	4b49      	ldr	r3, [pc, #292]	@ (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003010:	e001      	b.n	8003016 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003012:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4944      	ldr	r1, [pc, #272]	@ (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800301e:	428b      	cmp	r3, r1
 8003020:	d101      	bne.n	8003026 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003022:	4b44      	ldr	r3, [pc, #272]	@ (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003024:	e001      	b.n	800302a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003026:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800302a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800302e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003030:	2300      	movs	r3, #0
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304a:	f043 0204 	orr.w	r2, r3, #4
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff fdf6 	bl	8002c44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003058:	e089      	b.n	800316e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b02      	cmp	r3, #2
 8003062:	d107      	bne.n	8003074 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f8be 	bl	80031f0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d107      	bne.n	800308e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f8fd 	bl	8003288 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003094:	2b40      	cmp	r3, #64	@ 0x40
 8003096:	d12f      	bne.n	80030f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d02a      	beq.n	80030f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80030b0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d101      	bne.n	80030c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80030bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030be:	e001      	b.n	80030c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80030c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4919      	ldr	r1, [pc, #100]	@ (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030cc:	428b      	cmp	r3, r1
 80030ce:	d101      	bne.n	80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80030d0:	4b18      	ldr	r3, [pc, #96]	@ (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030d2:	e001      	b.n	80030d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80030d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80030dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	f043 0202 	orr.w	r2, r3, #2
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff fda6 	bl	8002c44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d136      	bne.n	8003170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d031      	beq.n	8003170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a07      	ldr	r2, [pc, #28]	@ (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d101      	bne.n	800311a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003116:	4b07      	ldr	r3, [pc, #28]	@ (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003118:	e001      	b.n	800311e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800311a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4902      	ldr	r1, [pc, #8]	@ (8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003126:	428b      	cmp	r3, r1
 8003128:	d106      	bne.n	8003138 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800312a:	4b02      	ldr	r3, [pc, #8]	@ (8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800312c:	e006      	b.n	800313c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800312e:	bf00      	nop
 8003130:	40003800 	.word	0x40003800
 8003134:	40003400 	.word	0x40003400
 8003138:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800313c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003140:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003150:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315e:	f043 0204 	orr.w	r2, r3, #4
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff fd6c 	bl	8002c44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800316c:	e000      	b.n	8003170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800316e:	bf00      	nop
}
 8003170:	bf00      	nop
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	1c99      	adds	r1, r3, #2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6251      	str	r1, [r2, #36]	@ 0x24
 800319e:	881a      	ldrh	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d113      	bne.n	80031e6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80031cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d106      	bne.n	80031e6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ffc9 	bl	8003178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	1c99      	adds	r1, r3, #2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6251      	str	r1, [r2, #36]	@ 0x24
 8003202:	8819      	ldrh	r1, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1d      	ldr	r2, [pc, #116]	@ (8003280 <I2SEx_TxISR_I2SExt+0x90>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d101      	bne.n	8003212 <I2SEx_TxISR_I2SExt+0x22>
 800320e:	4b1d      	ldr	r3, [pc, #116]	@ (8003284 <I2SEx_TxISR_I2SExt+0x94>)
 8003210:	e001      	b.n	8003216 <I2SEx_TxISR_I2SExt+0x26>
 8003212:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003216:	460a      	mov	r2, r1
 8003218:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d121      	bne.n	8003276 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a12      	ldr	r2, [pc, #72]	@ (8003280 <I2SEx_TxISR_I2SExt+0x90>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d101      	bne.n	8003240 <I2SEx_TxISR_I2SExt+0x50>
 800323c:	4b11      	ldr	r3, [pc, #68]	@ (8003284 <I2SEx_TxISR_I2SExt+0x94>)
 800323e:	e001      	b.n	8003244 <I2SEx_TxISR_I2SExt+0x54>
 8003240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	490d      	ldr	r1, [pc, #52]	@ (8003280 <I2SEx_TxISR_I2SExt+0x90>)
 800324c:	428b      	cmp	r3, r1
 800324e:	d101      	bne.n	8003254 <I2SEx_TxISR_I2SExt+0x64>
 8003250:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <I2SEx_TxISR_I2SExt+0x94>)
 8003252:	e001      	b.n	8003258 <I2SEx_TxISR_I2SExt+0x68>
 8003254:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003258:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800325c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ff81 	bl	8003178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40003800 	.word	0x40003800
 8003284:	40003400 	.word	0x40003400

08003288 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68d8      	ldr	r0, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	1c99      	adds	r1, r3, #2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80032a0:	b282      	uxth	r2, r0
 80032a2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d113      	bne.n	80032e4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032ca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ff4a 	bl	8003178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a20      	ldr	r2, [pc, #128]	@ (800337c <I2SEx_RxISR_I2SExt+0x90>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <I2SEx_RxISR_I2SExt+0x16>
 80032fe:	4b20      	ldr	r3, [pc, #128]	@ (8003380 <I2SEx_RxISR_I2SExt+0x94>)
 8003300:	e001      	b.n	8003306 <I2SEx_RxISR_I2SExt+0x1a>
 8003302:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003306:	68d8      	ldr	r0, [r3, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	1c99      	adds	r1, r3, #2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003312:	b282      	uxth	r2, r0
 8003314:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d121      	bne.n	8003372 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a12      	ldr	r2, [pc, #72]	@ (800337c <I2SEx_RxISR_I2SExt+0x90>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <I2SEx_RxISR_I2SExt+0x50>
 8003338:	4b11      	ldr	r3, [pc, #68]	@ (8003380 <I2SEx_RxISR_I2SExt+0x94>)
 800333a:	e001      	b.n	8003340 <I2SEx_RxISR_I2SExt+0x54>
 800333c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	490d      	ldr	r1, [pc, #52]	@ (800337c <I2SEx_RxISR_I2SExt+0x90>)
 8003348:	428b      	cmp	r3, r1
 800334a:	d101      	bne.n	8003350 <I2SEx_RxISR_I2SExt+0x64>
 800334c:	4b0c      	ldr	r3, [pc, #48]	@ (8003380 <I2SEx_RxISR_I2SExt+0x94>)
 800334e:	e001      	b.n	8003354 <I2SEx_RxISR_I2SExt+0x68>
 8003350:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003354:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003358:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff03 	bl	8003178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40003800 	.word	0x40003800
 8003380:	40003400 	.word	0x40003400

08003384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e267      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d075      	beq.n	800348e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033a2:	4b88      	ldr	r3, [pc, #544]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d00c      	beq.n	80033c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ae:	4b85      	ldr	r3, [pc, #532]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d112      	bne.n	80033e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ba:	4b82      	ldr	r3, [pc, #520]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033c6:	d10b      	bne.n	80033e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c8:	4b7e      	ldr	r3, [pc, #504]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d05b      	beq.n	800348c <HAL_RCC_OscConfig+0x108>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d157      	bne.n	800348c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e242      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e8:	d106      	bne.n	80033f8 <HAL_RCC_OscConfig+0x74>
 80033ea:	4b76      	ldr	r3, [pc, #472]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a75      	ldr	r2, [pc, #468]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e01d      	b.n	8003434 <HAL_RCC_OscConfig+0xb0>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x98>
 8003402:	4b70      	ldr	r3, [pc, #448]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6f      	ldr	r2, [pc, #444]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b6d      	ldr	r3, [pc, #436]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a6c      	ldr	r2, [pc, #432]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e00b      	b.n	8003434 <HAL_RCC_OscConfig+0xb0>
 800341c:	4b69      	ldr	r3, [pc, #420]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a68      	ldr	r2, [pc, #416]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	4b66      	ldr	r3, [pc, #408]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a65      	ldr	r2, [pc, #404]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 800342e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d013      	beq.n	8003464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fd fefa 	bl	8001234 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003444:	f7fd fef6 	bl	8001234 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	@ 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e207      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	4b5b      	ldr	r3, [pc, #364]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0xc0>
 8003462:	e014      	b.n	800348e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fd fee6 	bl	8001234 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800346c:	f7fd fee2 	bl	8001234 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	@ 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e1f3      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347e:	4b51      	ldr	r3, [pc, #324]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0xe8>
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d063      	beq.n	8003562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800349a:	4b4a      	ldr	r3, [pc, #296]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a6:	4b47      	ldr	r3, [pc, #284]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d11c      	bne.n	80034ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b2:	4b44      	ldr	r3, [pc, #272]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d116      	bne.n	80034ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034be:	4b41      	ldr	r3, [pc, #260]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <HAL_RCC_OscConfig+0x152>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e1c7      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d6:	4b3b      	ldr	r3, [pc, #236]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4937      	ldr	r1, [pc, #220]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ea:	e03a      	b.n	8003562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d020      	beq.n	8003536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f4:	4b34      	ldr	r3, [pc, #208]	@ (80035c8 <HAL_RCC_OscConfig+0x244>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fd fe9b 	bl	8001234 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003502:	f7fd fe97 	bl	8001234 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e1a8      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003514:	4b2b      	ldr	r3, [pc, #172]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003520:	4b28      	ldr	r3, [pc, #160]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4925      	ldr	r1, [pc, #148]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003530:	4313      	orrs	r3, r2
 8003532:	600b      	str	r3, [r1, #0]
 8003534:	e015      	b.n	8003562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003536:	4b24      	ldr	r3, [pc, #144]	@ (80035c8 <HAL_RCC_OscConfig+0x244>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fd fe7a 	bl	8001234 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003544:	f7fd fe76 	bl	8001234 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e187      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003556:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d036      	beq.n	80035dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d016      	beq.n	80035a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003576:	4b15      	ldr	r3, [pc, #84]	@ (80035cc <HAL_RCC_OscConfig+0x248>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fd fe5a 	bl	8001234 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003584:	f7fd fe56 	bl	8001234 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e167      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003596:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x200>
 80035a2:	e01b      	b.n	80035dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a4:	4b09      	ldr	r3, [pc, #36]	@ (80035cc <HAL_RCC_OscConfig+0x248>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035aa:	f7fd fe43 	bl	8001234 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b0:	e00e      	b.n	80035d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b2:	f7fd fe3f 	bl	8001234 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d907      	bls.n	80035d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e150      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
 80035c4:	40023800 	.word	0x40023800
 80035c8:	42470000 	.word	0x42470000
 80035cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d0:	4b88      	ldr	r3, [pc, #544]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 80035d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ea      	bne.n	80035b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8097 	beq.w	8003718 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ee:	4b81      	ldr	r3, [pc, #516]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10f      	bne.n	800361a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	4b7d      	ldr	r3, [pc, #500]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	4a7c      	ldr	r2, [pc, #496]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003608:	6413      	str	r3, [r2, #64]	@ 0x40
 800360a:	4b7a      	ldr	r3, [pc, #488]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	4b77      	ldr	r3, [pc, #476]	@ (80037f8 <HAL_RCC_OscConfig+0x474>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d118      	bne.n	8003658 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003626:	4b74      	ldr	r3, [pc, #464]	@ (80037f8 <HAL_RCC_OscConfig+0x474>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a73      	ldr	r2, [pc, #460]	@ (80037f8 <HAL_RCC_OscConfig+0x474>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003632:	f7fd fdff 	bl	8001234 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363a:	f7fd fdfb 	bl	8001234 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e10c      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	4b6a      	ldr	r3, [pc, #424]	@ (80037f8 <HAL_RCC_OscConfig+0x474>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x2ea>
 8003660:	4b64      	ldr	r3, [pc, #400]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003664:	4a63      	ldr	r2, [pc, #396]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6713      	str	r3, [r2, #112]	@ 0x70
 800366c:	e01c      	b.n	80036a8 <HAL_RCC_OscConfig+0x324>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b05      	cmp	r3, #5
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x30c>
 8003676:	4b5f      	ldr	r3, [pc, #380]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367a:	4a5e      	ldr	r2, [pc, #376]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 800367c:	f043 0304 	orr.w	r3, r3, #4
 8003680:	6713      	str	r3, [r2, #112]	@ 0x70
 8003682:	4b5c      	ldr	r3, [pc, #368]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003686:	4a5b      	ldr	r2, [pc, #364]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6713      	str	r3, [r2, #112]	@ 0x70
 800368e:	e00b      	b.n	80036a8 <HAL_RCC_OscConfig+0x324>
 8003690:	4b58      	ldr	r3, [pc, #352]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003694:	4a57      	ldr	r2, [pc, #348]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	6713      	str	r3, [r2, #112]	@ 0x70
 800369c:	4b55      	ldr	r3, [pc, #340]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a0:	4a54      	ldr	r2, [pc, #336]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 80036a2:	f023 0304 	bic.w	r3, r3, #4
 80036a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d015      	beq.n	80036dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fd fdc0 	bl	8001234 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fd fdbc 	bl	8001234 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e0cb      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ce:	4b49      	ldr	r3, [pc, #292]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0ee      	beq.n	80036b8 <HAL_RCC_OscConfig+0x334>
 80036da:	e014      	b.n	8003706 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036dc:	f7fd fdaa 	bl	8001234 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e2:	e00a      	b.n	80036fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e4:	f7fd fda6 	bl	8001234 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e0b5      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fa:	4b3e      	ldr	r3, [pc, #248]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1ee      	bne.n	80036e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d105      	bne.n	8003718 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370c:	4b39      	ldr	r3, [pc, #228]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 800370e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003710:	4a38      	ldr	r2, [pc, #224]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003716:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a1 	beq.w	8003864 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003722:	4b34      	ldr	r3, [pc, #208]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b08      	cmp	r3, #8
 800372c:	d05c      	beq.n	80037e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d141      	bne.n	80037ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003736:	4b31      	ldr	r3, [pc, #196]	@ (80037fc <HAL_RCC_OscConfig+0x478>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fd fd7a 	bl	8001234 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003744:	f7fd fd76 	bl	8001234 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e087      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003756:	4b27      	ldr	r3, [pc, #156]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69da      	ldr	r2, [r3, #28]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	019b      	lsls	r3, r3, #6
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	3b01      	subs	r3, #1
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	061b      	lsls	r3, r3, #24
 8003786:	491b      	ldr	r1, [pc, #108]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800378c:	4b1b      	ldr	r3, [pc, #108]	@ (80037fc <HAL_RCC_OscConfig+0x478>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003792:	f7fd fd4f 	bl	8001234 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379a:	f7fd fd4b 	bl	8001234 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e05c      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ac:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x416>
 80037b8:	e054      	b.n	8003864 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b10      	ldr	r3, [pc, #64]	@ (80037fc <HAL_RCC_OscConfig+0x478>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fd fd38 	bl	8001234 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fd fd34 	bl	8001234 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e045      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_RCC_OscConfig+0x470>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x444>
 80037e6:	e03d      	b.n	8003864 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e038      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40007000 	.word	0x40007000
 80037fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003800:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <HAL_RCC_OscConfig+0x4ec>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d028      	beq.n	8003860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d121      	bne.n	8003860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d11a      	bne.n	8003860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003830:	4013      	ands	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003836:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003838:	4293      	cmp	r3, r2
 800383a:	d111      	bne.n	8003860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	3b01      	subs	r3, #1
 800384a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d107      	bne.n	8003860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800

08003874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0cc      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003888:	4b68      	ldr	r3, [pc, #416]	@ (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d90c      	bls.n	80038b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b65      	ldr	r3, [pc, #404]	@ (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b63      	ldr	r3, [pc, #396]	@ (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0b8      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d020      	beq.n	80038fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c8:	4b59      	ldr	r3, [pc, #356]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a58      	ldr	r2, [pc, #352]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e0:	4b53      	ldr	r3, [pc, #332]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4a52      	ldr	r2, [pc, #328]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ec:	4b50      	ldr	r3, [pc, #320]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	494d      	ldr	r1, [pc, #308]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d044      	beq.n	8003994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b47      	ldr	r3, [pc, #284]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d119      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e07f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d003      	beq.n	8003932 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392e:	2b03      	cmp	r3, #3
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003932:	4b3f      	ldr	r3, [pc, #252]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e06f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003942:	4b3b      	ldr	r3, [pc, #236]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e067      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003952:	4b37      	ldr	r3, [pc, #220]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 0203 	bic.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4934      	ldr	r1, [pc, #208]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	4313      	orrs	r3, r2
 8003962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003964:	f7fd fc66 	bl	8001234 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396a:	e00a      	b.n	8003982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396c:	f7fd fc62 	bl	8001234 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e04f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	4b2b      	ldr	r3, [pc, #172]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 020c 	and.w	r2, r3, #12
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	429a      	cmp	r2, r3
 8003992:	d1eb      	bne.n	800396c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003994:	4b25      	ldr	r3, [pc, #148]	@ (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d20c      	bcs.n	80039bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b22      	ldr	r3, [pc, #136]	@ (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b20      	ldr	r3, [pc, #128]	@ (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e032      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c8:	4b19      	ldr	r3, [pc, #100]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4916      	ldr	r1, [pc, #88]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e6:	4b12      	ldr	r3, [pc, #72]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	490e      	ldr	r1, [pc, #56]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039fa:	f000 f821 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 80039fe:	4602      	mov	r2, r0
 8003a00:	4b0b      	ldr	r3, [pc, #44]	@ (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	490a      	ldr	r1, [pc, #40]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	5ccb      	ldrb	r3, [r1, r3]
 8003a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a12:	4a09      	ldr	r2, [pc, #36]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a16:	4b09      	ldr	r3, [pc, #36]	@ (8003a3c <HAL_RCC_ClockConfig+0x1c8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd fbc6 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023c00 	.word	0x40023c00
 8003a30:	40023800 	.word	0x40023800
 8003a34:	08003f00 	.word	0x08003f00
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	20000004 	.word	0x20000004

08003a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a44:	b090      	sub	sp, #64	@ 0x40
 8003a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a58:	4b59      	ldr	r3, [pc, #356]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 030c 	and.w	r3, r3, #12
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d00d      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x40>
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	f200 80a1 	bhi.w	8003bac <HAL_RCC_GetSysClockFreq+0x16c>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x34>
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d003      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a72:	e09b      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4b53      	ldr	r3, [pc, #332]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a78:	e09b      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a7a:	4b53      	ldr	r3, [pc, #332]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a7e:	e098      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a80:	4b4f      	ldr	r3, [pc, #316]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a8a:	4b4d      	ldr	r3, [pc, #308]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d028      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a96:	4b4a      	ldr	r3, [pc, #296]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	099b      	lsrs	r3, r3, #6
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4b47      	ldr	r3, [pc, #284]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aac:	fb03 f201 	mul.w	r2, r3, r1
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	fb00 f303 	mul.w	r3, r0, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	4a43      	ldr	r2, [pc, #268]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aba:	fba0 1202 	umull	r1, r2, r0, r2
 8003abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ac0:	460a      	mov	r2, r1
 8003ac2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ac4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ac6:	4413      	add	r3, r2
 8003ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003acc:	2200      	movs	r2, #0
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	61fa      	str	r2, [r7, #28]
 8003ad2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ada:	f7fc fb75 	bl	80001c8 <__aeabi_uldivmod>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae6:	e053      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae8:	4b35      	ldr	r3, [pc, #212]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	099b      	lsrs	r3, r3, #6
 8003aee:	2200      	movs	r2, #0
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	617a      	str	r2, [r7, #20]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003afa:	f04f 0b00 	mov.w	fp, #0
 8003afe:	4652      	mov	r2, sl
 8003b00:	465b      	mov	r3, fp
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	0159      	lsls	r1, r3, #5
 8003b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b10:	0150      	lsls	r0, r2, #5
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	ebb2 080a 	subs.w	r8, r2, sl
 8003b1a:	eb63 090b 	sbc.w	r9, r3, fp
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b32:	ebb2 0408 	subs.w	r4, r2, r8
 8003b36:	eb63 0509 	sbc.w	r5, r3, r9
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	00eb      	lsls	r3, r5, #3
 8003b44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b48:	00e2      	lsls	r2, r4, #3
 8003b4a:	4614      	mov	r4, r2
 8003b4c:	461d      	mov	r5, r3
 8003b4e:	eb14 030a 	adds.w	r3, r4, sl
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	eb45 030b 	adc.w	r3, r5, fp
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b66:	4629      	mov	r1, r5
 8003b68:	028b      	lsls	r3, r1, #10
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b70:	4621      	mov	r1, r4
 8003b72:	028a      	lsls	r2, r1, #10
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	60fa      	str	r2, [r7, #12]
 8003b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b84:	f7fc fb20 	bl	80001c8 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b90:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	0c1b      	lsrs	r3, r3, #16
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ba0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003baa:	e002      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bac:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3740      	adds	r7, #64	@ 0x40
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	00f42400 	.word	0x00f42400
 8003bc8:	017d7840 	.word	0x017d7840

08003bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd0:	4b03      	ldr	r3, [pc, #12]	@ (8003be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000000 	.word	0x20000000

08003be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003be8:	f7ff fff0 	bl	8003bcc <HAL_RCC_GetHCLKFreq>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	0a9b      	lsrs	r3, r3, #10
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	4903      	ldr	r1, [pc, #12]	@ (8003c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40023800 	.word	0x40023800
 8003c08:	08003f10 	.word	0x08003f10

08003c0c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d035      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c34:	4b62      	ldr	r3, [pc, #392]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c3a:	f7fd fafb 	bl	8001234 <HAL_GetTick>
 8003c3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c42:	f7fd faf7 	bl	8001234 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e0b0      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c54:	4b5b      	ldr	r3, [pc, #364]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	019a      	lsls	r2, r3, #6
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	071b      	lsls	r3, r3, #28
 8003c6c:	4955      	ldr	r1, [pc, #340]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c74:	4b52      	ldr	r3, [pc, #328]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c7a:	f7fd fadb 	bl	8001234 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c80:	e008      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c82:	f7fd fad7 	bl	8001234 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e090      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c94:	4b4b      	ldr	r3, [pc, #300]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8083 	beq.w	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	4b44      	ldr	r3, [pc, #272]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	4a43      	ldr	r2, [pc, #268]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cbe:	4b41      	ldr	r3, [pc, #260]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003cca:	4b3f      	ldr	r3, [pc, #252]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3e      	ldr	r2, [pc, #248]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cd6:	f7fd faad 	bl	8001234 <HAL_GetTick>
 8003cda:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cde:	f7fd faa9 	bl	8001234 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e062      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003cf0:	4b35      	ldr	r3, [pc, #212]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cfc:	4b31      	ldr	r3, [pc, #196]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d04:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d02f      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d028      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d24:	4b29      	ldr	r3, [pc, #164]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d2a:	4b28      	ldr	r3, [pc, #160]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d30:	4a24      	ldr	r2, [pc, #144]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d36:	4b23      	ldr	r3, [pc, #140]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d114      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d42:	f7fd fa77 	bl	8001234 <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fd fa73 	bl	8001234 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e02a      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d60:	4b18      	ldr	r3, [pc, #96]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ee      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d78:	d10d      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003d7a:	4b12      	ldr	r3, [pc, #72]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d8e:	490d      	ldr	r1, [pc, #52]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]
 8003d94:	e005      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d96:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d9c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003da0:	6093      	str	r3, [r2, #8]
 8003da2:	4b08      	ldr	r3, [pc, #32]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dae:	4905      	ldr	r1, [pc, #20]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	42470068 	.word	0x42470068
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	42470e40 	.word	0x42470e40

08003dd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d13f      	bne.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003dee:	4b24      	ldr	r3, [pc, #144]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003df6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d006      	beq.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e04:	d12f      	bne.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e06:	4b1f      	ldr	r3, [pc, #124]	@ (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003e08:	617b      	str	r3, [r7, #20]
          break;
 8003e0a:	e02f      	b.n	8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e18:	d108      	bne.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e1a:	4b19      	ldr	r3, [pc, #100]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e22:	4a19      	ldr	r2, [pc, #100]	@ (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	e007      	b.n	8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e2c:	4b14      	ldr	r3, [pc, #80]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e34:	4a15      	ldr	r2, [pc, #84]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003e3c:	4b10      	ldr	r3, [pc, #64]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003e50:	4b0b      	ldr	r3, [pc, #44]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e56:	0f1b      	lsrs	r3, r3, #28
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e62:	617b      	str	r3, [r7, #20]
          break;
 8003e64:	e002      	b.n	8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
          break;
 8003e6a:	bf00      	nop
        }
      }
      break;
 8003e6c:	e000      	b.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003e6e:	bf00      	nop
    }
  }
  return frequency;
 8003e70:	697b      	ldr	r3, [r7, #20]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	00bb8000 	.word	0x00bb8000
 8003e88:	017d7840 	.word	0x017d7840
 8003e8c:	00f42400 	.word	0x00f42400

08003e90 <memset>:
 8003e90:	4402      	add	r2, r0
 8003e92:	4603      	mov	r3, r0
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d100      	bne.n	8003e9a <memset+0xa>
 8003e98:	4770      	bx	lr
 8003e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e9e:	e7f9      	b.n	8003e94 <memset+0x4>

08003ea0 <__libc_init_array>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ed8 <__libc_init_array+0x38>)
 8003ea4:	4c0d      	ldr	r4, [pc, #52]	@ (8003edc <__libc_init_array+0x3c>)
 8003ea6:	1b64      	subs	r4, r4, r5
 8003ea8:	10a4      	asrs	r4, r4, #2
 8003eaa:	2600      	movs	r6, #0
 8003eac:	42a6      	cmp	r6, r4
 8003eae:	d109      	bne.n	8003ec4 <__libc_init_array+0x24>
 8003eb0:	4d0b      	ldr	r5, [pc, #44]	@ (8003ee0 <__libc_init_array+0x40>)
 8003eb2:	4c0c      	ldr	r4, [pc, #48]	@ (8003ee4 <__libc_init_array+0x44>)
 8003eb4:	f000 f818 	bl	8003ee8 <_init>
 8003eb8:	1b64      	subs	r4, r4, r5
 8003eba:	10a4      	asrs	r4, r4, #2
 8003ebc:	2600      	movs	r6, #0
 8003ebe:	42a6      	cmp	r6, r4
 8003ec0:	d105      	bne.n	8003ece <__libc_init_array+0x2e>
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec8:	4798      	blx	r3
 8003eca:	3601      	adds	r6, #1
 8003ecc:	e7ee      	b.n	8003eac <__libc_init_array+0xc>
 8003ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed2:	4798      	blx	r3
 8003ed4:	3601      	adds	r6, #1
 8003ed6:	e7f2      	b.n	8003ebe <__libc_init_array+0x1e>
 8003ed8:	08003f28 	.word	0x08003f28
 8003edc:	08003f28 	.word	0x08003f28
 8003ee0:	08003f28 	.word	0x08003f28
 8003ee4:	08003f2c 	.word	0x08003f2c

08003ee8 <_init>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	bf00      	nop
 8003eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eee:	bc08      	pop	{r3}
 8003ef0:	469e      	mov	lr, r3
 8003ef2:	4770      	bx	lr

08003ef4 <_fini>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	bf00      	nop
 8003ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efa:	bc08      	pop	{r3}
 8003efc:	469e      	mov	lr, r3
 8003efe:	4770      	bx	lr
